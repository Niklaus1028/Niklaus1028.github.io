<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Design Patterns</title>
    <url>/2020/01/31/Design-Patterns/</url>
    <content><![CDATA[<h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><h3 id="设计模式分为三种类型，共23种"><a href="#设计模式分为三种类型，共23种" class="headerlink" title="设计模式分为三种类型，共23种"></a>设计模式分为三种类型，共23种</h3><ul>
<li>创建型模式：单例模式，抽象工厂模式，工厂模式，原型模式，建造者模式。</li>
<li>结构型模式：适配器模式，装饰者模式，桥接模式，组合模式，外观模式，享元模式，代理模式</li>
<li>行为型模式：模版方法模式，命令模式，访问者模式，迭代器模式，观察者模式，备忘录模式，解释器模式（interpreter模式），状态模式，策略模式，职责链模式（责任链）模式。<h2 id="设计模式常用的七大原则"><a href="#设计模式常用的七大原则" class="headerlink" title="设计模式常用的七大原则"></a>设计模式常用的七大原则</h2><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h3></li>
<li>降低类的复杂度，一个类只负责一项职责</li>
<li>便于后期的代码的维护，提高代码的刻度性</li>
<li>降低后期因变更而引起的风险</li>
<li>通常情况下我们应该遵循单一职责原则，但在一个类中方法较少的时候，我们可以在方法的级别保持单一职责原则即可</li>
</ul>
<hr>
<h3 id="2-接口隔离原则"><a href="#2-接口隔离原则" class="headerlink" title="2. 接口隔离原则"></a>2. 接口隔离原则</h3><ul>
<li>一个类通过接口依赖另一个类，该接口应该是最小接口，也就是通过接口的隔离保证类中不需要接口中多余的方法，如果接口中有用不到的方法，就把这个接口中拆分成多个小接口，避免造成浪费。</li>
</ul>
<hr>
<h3 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3. 依赖倒转原则（Dependence Inversion Principle）"></a>3. 依赖倒转原则（Dependence Inversion Principle）</h3><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependcyIversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">        person.receive(<span class="keyword">new</span> Weixin());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ireceiver</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">Ireceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weixin</span> <span class="keyword">implements</span> <span class="title">Ireceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"one world,one dream"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Ireceiver ireceiver)</span> </span>&#123;</span><br><span class="line">        System.out.println(ireceiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总结：通过类与接口发生依赖，与子实现类没有关系，这样便于后期的修改，这就是面向接口编程的思想</span></span><br></pre></td></tr></table></figure>
<ul>
<li>低层模块最好是抽象类或者接口，这样程序会更稳定</li>
<li>变量声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利用程序扩展和优化</li>
<li>继承时遵循里氏替换原则</li>
</ul>
<h3 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4. 里氏替换原则"></a>4. 里氏替换原则</h3><ul>
<li>继承增加了程序的耦合性</li>
<li>子类尽量不要重写父类的方法，如果需要重写，就通过依赖，组合，聚合的方法，提升一个基类，让原有的父类和子类继承这个基类<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span> + a.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1-8="</span> + a.fun1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"11+3="</span> + b.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1+8="</span> + b.fun1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"11+3+9="</span> + b.fun2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span> + b.fun3(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B类继承了A</span></span><br><span class="line"><span class="comment">//增加了一个新功能：完成两个数相加，然后和9求和</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过依赖的方式与类A发生关系</span></span><br><span class="line">    <span class="keyword">private</span> A a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun1(a, b) + <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a.fun1(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-开闭原则-ocp-open-closed-principle"><a href="#5-开闭原则-ocp-open-closed-principle" class="headerlink" title="5. 开闭原则 ocp(open closed principle)"></a>5. 开闭原则 ocp(open closed principle)</h3></li>
<li>是编程中最基础，最重要的设计原则<h3 id="6-迪米特法则（最少知道原则）"><a href="#6-迪米特法则（最少知道原则）" class="headerlink" title="6. 迪米特法则（最少知道原则）"></a>6. 迪米特法则（最少知道原则）</h3></li>
<li>降低类之间的耦合，对自己依赖的类知道的越少越好</li>
<li>降低类间（对象间）耦合关系，并不是要求完全没有依赖关系</li>
<li>直接朋友，出现在成员变量，方法参数，方法返回值，如果出现在局部变量中则是陌生朋友<h3 id="7-合成复用原则"><a href="#7-合成复用原则" class="headerlink" title="7. 合成复用原则"></a>7. 合成复用原则</h3></li>
<li>原则是尽量使用合成/聚合的方式，而不是使用继承<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">        d.setAnimal();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在跑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在睡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在吃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式一依赖</span></span><br><span class="line"><span class="comment">/*class Dog &#123;</span></span><br><span class="line"><span class="comment">    public void action(Animal animal)&#123;</span></span><br><span class="line"><span class="comment">        animal.run();</span></span><br><span class="line"><span class="comment">        animal.eat();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//方式二聚合</span></span><br><span class="line"><span class="comment">/*class Dog &#123;</span></span><br><span class="line"><span class="comment">    private Animal animal;</span></span><br><span class="line"><span class="comment">    public void setAnimal(Animal animal)&#123;</span></span><br><span class="line"><span class="comment">        animal.eat();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//方式三：组合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>框架</title>
    <url>/2020/01/29/%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h2 id="框架（半成品软件）"><a href="#框架（半成品软件）" class="headerlink" title="框架（半成品软件）"></a>框架（半成品软件）</h2><pre><code>高度抽取可重用代码的一种设计，高度的通用性;
框架：抽取成一种高度可重用的；事务控制，强大的servlet，项目中的一些工具。
    框架：多个可重用模块的集合，形成一个某个领域的整体解决方案；</code></pre><hr>
<h2 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h2><h3 id="容器（可以管理所有的组件（类））框架；"><a href="#容器（可以管理所有的组件（类））框架；" class="headerlink" title="容器（可以管理所有的组件（类））框架；"></a>容器（可以管理所有的组件（类））框架；</h3><h3 id="核心关注：IOC和AOP"><a href="#核心关注：IOC和AOP" class="headerlink" title="核心关注：IOC和AOP"></a>核心关注：IOC和AOP</h3><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><h3 id="Test-：Spring的单元测试模块；"><a href="#Test-：Spring的单元测试模块；" class="headerlink" title="Test ：Spring的单元测试模块；"></a>Test ：Spring的单元测试模块；</h3><h3 id="Core-Container：核心容器（IOC）；黑色代表这部分的功能由那些jar包组成；要使用这个部分的完整功能，这些jar包都需要导入"><a href="#Core-Container：核心容器（IOC）；黑色代表这部分的功能由那些jar包组成；要使用这个部分的完整功能，这些jar包都需要导入" class="headerlink" title="Core Container：核心容器（IOC）；黑色代表这部分的功能由那些jar包组成；要使用这个部分的完整功能，这些jar包都需要导入"></a>Core Container：核心容器（IOC）；黑色代表这部分的功能由那些jar包组成；要使用这个部分的完整功能，这些jar包都需要导入</h3><h3 id="（AOP-Aspects）（面向切面编程模块）"><a href="#（AOP-Aspects）（面向切面编程模块）" class="headerlink" title="（AOP+Aspects）（面向切面编程模块）"></a>（AOP+Aspects）（面向切面编程模块）</h3><h3 id="数据访问-Spring访问数据库模块"><a href="#数据访问-Spring访问数据库模块" class="headerlink" title="数据访问 Spring访问数据库模块"></a>数据访问 Spring访问数据库模块</h3><h3 id="Web：Spring开发web应用模块"><a href="#Web：Spring开发web应用模块" class="headerlink" title="Web：Spring开发web应用模块"></a>Web：Spring开发web应用模块</h3>]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/01/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<h2 id="单例设计模式（饿汉式静态变量）"><a href="#单例设计模式（饿汉式静态变量）" class="headerlink" title="单例设计模式（饿汉式静态变量）"></a>单例设计模式（饿汉式静态变量）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTest1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance==instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//饿汉式（静态变量）</span></span><br><span class="line"><span class="comment">//优点：这种写法比较简单，在类装载的时候就完成了实例化，避免了线程同步的问题</span></span><br><span class="line"><span class="comment">//缺点：没有实现lazy loading的效果，实例创建可能不会被使用，导致内存的浪费</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造方法，目的：不让外界随便创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//本类部自己创建实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//对外界提供公共的静态方法，返回实例的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTest2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton2 instance = Singleton2.getInstance();</span><br><span class="line">        Singleton2 instance1 = Singleton2.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式（静态代码块）</span></span><br><span class="line"><span class="comment">//优点：这种写法比较简单，在类装载的时候就完成了实例化，避免了线程同步的问题</span></span><br><span class="line"><span class="comment">//缺点：没有实现lazy loading的效果，实例创建可能不会被使用，导致内存的浪费</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造方法，目的：不让外界随便创建实例</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在本类中声明实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//在静态代码块中实例化对象</span></span><br><span class="line">        instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外界提供公共的静态方法，返回实例的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="单例设计模式（懒汉式线程不安全）"><a href="#单例设计模式（懒汉式线程不安全）" class="headerlink" title="单例设计模式（懒汉式线程不安全）"></a>单例设计模式（懒汉式线程不安全）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式（多线程不安全）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需要时再创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式（线程安全）</span></span><br><span class="line"><span class="comment">//优点：解决了线程安全的问题</span></span><br><span class="line"><span class="comment">//缺点：效率太低,不推荐使用</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需要时再创建对象,提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h2><h3 id="解决了多线程安全问题"><a href="#解决了多线程安全问题" class="headerlink" title="解决了多线程安全问题"></a>解决了多线程安全问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双重检查 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">//volatile防止指令重排推荐使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要时再创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一次检查</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//第二次检查</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><h3 id="利用jvm的装载机制，当类加载时静态内部类不会立即被加载，保证了线程安全以及效率的问题"><a href="#利用jvm的装载机制，当类加载时静态内部类不会立即被加载，保证了线程安全以及效率的问题" class="headerlink" title="利用jvm的装载机制，当类加载时静态内部类不会立即被加载，保证了线程安全以及效率的问题"></a>利用jvm的装载机制，当类加载时静态内部类不会立即被加载，保证了线程安全以及效率的问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要时再创建对象,提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleInstance.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="使用枚举，可以实现单例，推荐使用，还能防止反序列化创建对象"><a href="#使用枚举，可以实现单例，推荐使用，还能防止反序列化创建对象" class="headerlink" title="使用枚举，可以实现单例，推荐使用，还能防止反序列化创建对象"></a>使用枚举，可以实现单例，推荐使用，还能防止反序列化创建对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.INSTANCE;</span><br><span class="line">        Singleton instance1 = Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;<span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>My-first-blog</title>
    <url>/2020/01/28/My-first-blog/</url>
    <content><![CDATA[<h1 id="Mac下-hexo博客的搭建"><a href="#Mac下-hexo博客的搭建" class="headerlink" title="Mac下 hexo博客的搭建"></a>Mac下 hexo博客的搭建</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><h3 id="这里可以去Nodejs的官网去下载安装"><a href="#这里可以去Nodejs的官网去下载安装" class="headerlink" title="这里可以去Nodejs的官网去下载安装"></a>这里可以去Nodejs的官网去下载安装</h3><ul>
<li>[hyperlink]（<a href="https://nodejs.org/en/）" target="_blank" rel="noopener">https://nodejs.org/en/）</a></li>
<li>点击downloads 选择合适的版本下载</li>
</ul>
<hr>
<h2 id="打开电脑的终端"><a href="#打开电脑的终端" class="headerlink" title="打开电脑的终端"></a>打开电脑的终端</h2><h3 id="切换到我们的sudo用户，这里是以管理员身份打开"><a href="#切换到我们的sudo用户，这里是以管理员身份打开" class="headerlink" title="切换到我们的sudo用户，这里是以管理员身份打开"></a>切换到我们的sudo用户，这里是以管理员身份打开</h3><ul>
<li><p>执行代码：<code>sudo su</code></p>
</li>
<li><p>显示Password：“输入密码”</p>
</li>
</ul>
<h2 id="查看node的版本，npm的版本"><a href="#查看node的版本，npm的版本" class="headerlink" title="查看node的版本，npm的版本"></a>查看node的版本，npm的版本</h2><ul>
<li><p>执行代码: <code>node -v</code></p>
</li>
<li><p>执行代码: <code>npm -v</code></p>
</li>
</ul>
<h2 id="安装hexo的框架"><a href="#安装hexo的框架" class="headerlink" title="安装hexo的框架"></a>安装hexo的框架</h2><h3 id="这里使用npm包安装管理器来安装一个淘宝的cnpm的镜像源包安装管理器来安装"><a href="#这里使用npm包安装管理器来安装一个淘宝的cnpm的镜像源包安装管理器来安装" class="headerlink" title="这里使用npm包安装管理器来安装一个淘宝的cnpm的镜像源包安装管理器来安装"></a>这里使用npm包安装管理器来安装一个淘宝的cnpm的镜像源包安装管理器来安装</h3><ul>
<li>执行代码：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ul>
<p>安装完成后可以用代码<code>cnpm</code> 查看版本</p>
<h2 id="用cnpm全局安装hexo博客"><a href="#用cnpm全局安装hexo博客" class="headerlink" title="用cnpm全局安装hexo博客"></a>用cnpm全局安装hexo博客</h2><ul>
<li><p>执行代码：<code>cnpm install -g hexo-cli</code></p>
</li>
<li><p>安装完成后用<code>hexo -v</code>查看版本，确认安装完成。</p>
</li>
<li><p>查看当前路径:<code>pwd</code></p>
</li>
<li><p>新建一个blog的文件夹 ：<code>mkdir blog</code></p>
</li>
<li><p>注意！！！下面的所有操作都是在blog文件下操作，如果后面发生错误实在找不到删除blog文件夹重新操作即可。</p>
</li>
<li><p>进入blog文件夹，执行命令：<code>cd blog</code></p>
</li>
</ul>
<h2 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h2><ul>
<li>执行命令<code>sudo hexo init</code></li>
</ul>
<h2 id="最后启动hexo-blog"><a href="#最后启动hexo-blog" class="headerlink" title="最后启动hexo blog"></a>最后启动hexo blog</h2><ul>
<li>执行命令：<code>hexo s</code></li>
<li>默认在<a href="http://localhost:4000/可以打开" target="_blank" rel="noopener">http://localhost:4000/可以打开</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
</search>
