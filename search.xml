<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JUC</title>
    <url>/2020/03/31/JUC/</url>
    <content><![CDATA[<h2 id="原子性操作–Atomic-原子性"><a href="#原子性操作–Atomic-原子性" class="headerlink" title="原子性操作–Atomic 原子性"></a>原子性操作–Atomic 原子性</h2><ol>
<li>原子性操作实际上就是针对属性来提供线程安全的方法，在底层会自动采用CAS来保证线程安全。</li>
<li>volatile是Java提供的轻量级的线程同步机制</li>
</ol>
<h2 id="阻塞队列-BlockingQueue"><a href="#阻塞队列-BlockingQueue" class="headerlink" title="阻塞队列 BlockingQueue"></a>阻塞队列 BlockingQueue</h2><h3 id="原则："><a href="#原则：" class="headerlink" title="原则："></a>原则：</h3><ol>
<li>遵循FIFO</li>
<li>往往是有界的，容量固定不变</li>
<li>具有阻塞特性：如果队列已满，则试图放入的线程会被阻塞；如果队列为空，就会阻塞尝试获取的线程</li>
<li>不允许元素null</li>
</ol>
<h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><ol start="6">
<li><table>
<thead>
<tr>
<th></th>
<th>抛出异常</th>
<th>返回特殊值</th>
<th>产生阻塞</th>
<th>定时阻塞</th>
</tr>
</thead>
<tbody><tr>
<td>添加</td>
<td>add - IllegalStateException</td>
<td>offer - false</td>
<td>put</td>
<td>offer</td>
</tr>
<tr>
<td>获取</td>
<td>remove - NoSuchElementException</td>
<td>poll - null</td>
<td>take</td>
<td>poll</td>
</tr>
</tbody></table>
</li>
</ol>
<h2 id="ConcurrentMap-并发映射"><a href="#ConcurrentMap-并发映射" class="headerlink" title="ConcurrentMap -并发映射"></a>ConcurrentMap -并发映射</h2><ol>
<li>ConcurrentHashMap底层基于数组h+链表来存储数据，数组的每一个位置称之为桶</li>
<li>默认初始容量16（桶的数量），加载因子0.75</li>
<li>如果指定容量,底层会进行计算，实际容量一定是2的n次方</li>
<li>每次扩容每次增加一倍的桶数,扩容之后需要rehash操作<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">                   MAXIMUM_CAPACITY :</span><br><span class="line">                   tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//底层算法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = c - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>分段锁，封桶锁机制，不是把整个映射锁起来</li>
<li>在jdk1.7引入读写锁<h2 id="ConcurrentNavigableMap-并发导航映射"><a href="#ConcurrentNavigableMap-并发导航映射" class="headerlink" title="ConcurrentNavigableMap - 并发导航映射"></a>ConcurrentNavigableMap - 并发导航映射</h2></li>
<li>ConcurrentNavigableMap提供了用于截取子映射的方法</li>
<li>ConcurrentNavigableMap本身是一个接口，所以更多的是使用它的实现类ConcurrentSkipListMap - 并发跳跃表映射</li>
</ol>
<h2 id="跳跃表"><a href="#跳跃表" class="headerlink" title="跳跃表"></a>跳跃表</h2><ol>
<li>针对有序集合</li>
<li>适合于增删少，查询多的场景</li>
<li>跳跃表可以进行多层提取，最上层的跳跃表的元素个数不能少于2个</li>
<li>跳跃表是典型的“以空间换时间“的产物</li>
<li>在跳跃表中新添元素提取到上层跳跃表，遵循抛硬币原则</li>
<li>跳跃表的时间复杂度是O(logn)<h2 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3></li>
<li>本质上是一个线程池<br>线程池：减少服务器的线程的创建和销毁，做到连接的复用</li>
<li>刚开始创建时空的，里面不包含任何线程</li>
<li>每接受一个请求，线程池都会创建一个线程(核心线程）来处理这个请求，在创建线程的时候就需要指定线程的数量</li>
<li>在核心线程达到指定数量之前，来一个请求就会创建一个新的线程来处理这个请求，直到线程满了就不再创建</li>
<li>核心线程处理完这个请求不会销毁，等待下一个请求</li>
<li>如果核心线程全部沾满，新来的请求会暂存在工作队列，工作队列本身是一个阻塞式队列</li>
<li>当核心线程有空的时候，就会从工作队列中取出交给核心线程处理</li>
<li>如果工作队列被全部占用，有接受到新的请求，会将这个请求叫个临时线程来处理</li>
<li>当临时线程处理完请求之后不会立即结束，而是会存活一段时间，如果在这个时间段内接受到新的请求，会处理新的请求，如果没有接收到请求，就会被kill掉</li>
<li>临时线程不会从工作队列中拿出请求处理</li>
<li>当临时线程全部占用，那么新来的请求就会交给执行助手来拒绝处理，在实际开发中，如果需要拒绝请求，可能会产生多部操作，例如记录日志，页面跳转，请求重发</li>
<li>ScheduledExecutorService：定时调度执行器服务。在线程池的基础上加入了定时调度效果。这个线程池本身是很多定时调度机制的底层实现</li>
</ol>
<h2 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h2><pre><code>栈内存：执行方法- 计算 栈内存是线程独享的
堆内存：存储对象，线程共享
方法区：存储类信息（字节码，静态，常量）。线程共享的
本地方法栈：执行本地方法，线程独享
本地方法是指在Java中用native声明但使用其他语言实现的方法
pc计数器/寄存器：指令计数，线程独享</code></pre><p>如果需要计算一台服务器的线程承载量，考虑线程独享部分。<br>在jdk1.8中，栈内存最小128k<br>pc计数器一般只占几个字节，可以忽略</p>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>a. 红黑树本质上一棵自平衡二叉查找树</p>
<h3 id="b-特征："><a href="#b-特征：" class="headerlink" title="b.特征："></a>b.特征：</h3><ul>
<li>i.    所有节点的颜色非红即黑</li>
<li>ii.    根节点为黑色</li>
<li>iii.    红节点的子节点一定黑节点，黑节点的子节点可以是红节点也可以是黑节点</li>
<li>iv.    最底层的叶子节点一定是黑色的空节点</li>
<li>v.    从根节点到任意一个叶子节点的路径中经过的黑色节点个数一致，即黑节点高度是一致的</li>
<li>vi.    新添的节点颜色一定是红的<h3 id="c-修正："><a href="#c-修正：" class="headerlink" title="c. 修正："></a>c. 修正：</h3></li>
<li>i.    涂色：父子节点为红，叔父节点为红，将父节点核叔父节点涂成黑色，然后将祖父节点涂成红色</li>
<li>ii.    左旋：父子节点为红，叔父节点为黑，且子节点是右子叶，那么以子节点为轴进行左旋</li>
<li>iii.    右旋：父子节点为红，叔父节点为黑，且子节点是左子叶，那么以父节点为轴进行右旋<h3 id="d-红黑树的时间复杂度是O-logn"><a href="#d-红黑树的时间复杂度是O-logn" class="headerlink" title="d. 红黑树的时间复杂度是O(logn)"></a>d. 红黑树的时间复杂度是O(logn)</h3></li>
</ul>
<h2 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><ol>
<li>Callable是Java提供的一种定义线程的方式,在使用的时候通过泛型执行返回值类型</li>
</ol>
<h3 id="Callable和Runnable的区别"><a href="#Callable和Runnable的区别" class="headerlink" title="Callable和Runnable的区别"></a>Callable和Runnable的区别</h3><table>
<thead>
<tr>
<th></th>
<th align="left">Runnable</th>
<th>Callable</th>
</tr>
</thead>
<tbody><tr>
<td>返回值</td>
<td align="left">没有返回值</td>
<td>通过泛型来指定返回值的类型</td>
</tr>
<tr>
<td>启动方式</td>
<td align="left">1. 通过Thread的start方法启动 2. 通过线程池的submit或者是execute方法执行</td>
<td>通过线程池的submit方法执行</td>
</tr>
<tr>
<td>容错机制</td>
<td align="left">不允许抛出异常，所以不能利用全局方式(例如Spring中的异常通知)处理</td>
<td>允许抛出异常，所以可以利用切面或者是全局方式来处理异常</td>
</tr>
</tbody></table>
<hr>
<h2 id="分叉合并池"><a href="#分叉合并池" class="headerlink" title="分叉合并池"></a>分叉合并池</h2><ol>
<li>Fork：分叉。将一个大任务拆分成多个小任务交给多个线程执行</li>
<li>Join：合并。将拆分出来的小任务的执行结果进行汇总</li>
<li>分叉合并的目的是为了提高CPU的利用率</li>
<li>在数据量相对小的时候，循环会比分叉合并快；数据量越大，分叉合并的优势越明显</li>
<li>分叉合并在进行的时候，导致其他程序的执行效率显著降低，所以分叉合并一般是在周末的凌晨来进行</li>
<li>分叉合并在分配子线程的时候，尽量做到每个核上的任务均匀：少的多分，多的少分</li>
<li>在分叉合并中，为了减少”慢任务”带来的效率降低，采取”work-stealing”(工作窃取)策略：当一个核将它的任务队列处理完成之后，这个核并不会闲下来，会随机扫描一个核，然后从被扫描核的任务队列尾端”偷取”一个任务回来执行</li>
</ol>
<h2 id="Lock-锁"><a href="#Lock-锁" class="headerlink" title="Lock - 锁"></a>Lock - 锁</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ol>
<li>相对于synchronized更加灵活和精细</li>
<li>ReadWriteLock - 读写锁<ul>
<li>a.    在使用的时候，需要用这个接口的实现类ReentrantReadWriteLock</li>
<li>b.    在加锁的时候，需要先通过对应的方法来获取读锁或者写锁</li>
</ul>
</li>
<li>公平和非公平策略<ul>
<li>a.    非公平策略下，线程会直接抢占执行权，在资源有限的前提下，线程之间抢到的次数不一样</li>
<li>b.    公平策略下，线程不是直接抢占执行权，而是去抢占入队顺序。宪曾之间的执行次数是基本一致的</li>
<li>c.    默认情况下，使用的是非公平策略</li>
<li>d.    相对而言，非公平策略的效率会更高一些</li>
</ul>
</li>
</ol>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ol>
<li>CountDownLatch：闭锁/线程递减锁。对线程进行计数，在计数归零之前会让线程陷入阻塞，直到计数归零才会放开阻塞 - 一波线程结束之后开启另一波线程</li>
<li>CyclicBarrier：栅栏。对线程进行计数，在计数归零之前让线程陷入阻塞，直到计数归零为止才会放开阻塞 - 线程到达同一个地点之后再分别执行</li>
<li>Exchanger：交换机。用于交换2个线程之间的信息</li>
<li>Semaphore：信号量。线程只有获取到信号之后才能执行，执行完成之后需要释放信号。如果所有的信号都被占用，那么后来的线程就会被阻塞</li>
</ol>
]]></content>
      <categories>
        <category>JUC</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发基础</title>
    <url>/2020/03/31/%E9%AB%98%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>a. 同步：一个对象或者一段逻辑在一段时间只允许被一个线程访问<br>b. 异步：一个对象或者一段逻辑在一段时间只允许被多个线程访问<br>c. 阻塞：一个线程只要没有拿到想要的结果就会一直等在这儿<br>d. 非阻塞：一个线程不管有没有拿到结果，都会继续执行下面的程序，不会在那边的等待</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>a. BIO ： 同步式阻塞线程<br>b. NIO ： 同步式非阻塞式线程 JDK1.4<br>c. AIO ： 异步式非阻塞式线程 JDK1.8，目前没有成熟的框架</p>
<h3 id="BIO的缺点"><a href="#BIO的缺点" class="headerlink" title="BIO的缺点"></a>BIO的缺点</h3><ol>
<li>一对一连接：每次有一个客户端发起连接，服务端就要产生一个线程来处理这个连接；如果有大量的客户端发起连接，就会产生大量的线程，可能导致服务端崩溃。</li>
<li>无效连接 如果客户端连接后不做任何操作但是一直保持连接，服务端的处理线程就不会释放，导致服务端</li>
<li>阻塞 效率低<h3 id="NIO三大组件"><a href="#NIO三大组件" class="headerlink" title="NIO三大组件"></a>NIO三大组件</h3><h4 id="Buffer-缓冲区"><a href="#Buffer-缓冲区" class="headerlink" title="Buffer-缓冲区"></a>Buffer-缓冲区</h4></li>
<li>作用：存储数据</li>
<li>底层是基于数组来存储数据,针对基本数据类型，提供7个子类：ByteBuffer，ShortBuffer，InteBuffer，LongBuffer，FloatBuffer，DoubleBuffer，CharBuffer</li>
<li>重要位置<br>a.capacity 容量位<br>b.position 操作位<br>c.limit 限制位<br>d. mark 标记位<h3 id="4-重要操作"><a href="#4-重要操作" class="headerlink" title="4.重要操作"></a>4.重要操作</h3><h3 id="反转缓冲区"><a href="#反转缓冲区" class="headerlink" title="反转缓冲区"></a>反转缓冲区</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//byteBuffer.flip();   </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">flip</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        limit = position;</span><br><span class="line">        position = <span class="number">0</span>;</span><br><span class="line">        mark = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="clear清空缓冲区"><a href="#clear清空缓冲区" class="headerlink" title="clear清空缓冲区"></a>clear清空缓冲区</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        position = <span class="number">0</span>;</span><br><span class="line">        limit = capacity;</span><br><span class="line">        mark = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="reset-重置缓冲区"><a href="#reset-重置缓冲区" class="headerlink" title="reset 重置缓冲区"></a>reset 重置缓冲区</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> m = mark;</span><br><span class="line">        <span class="keyword">if</span> (m &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidMarkException();</span><br><span class="line">        position = m;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="rewind-重绕缓冲区"><a href="#rewind-重绕缓冲区" class="headerlink" title="rewind 重绕缓冲区"></a>rewind 重绕缓冲区</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title">rewind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        position = <span class="number">0</span>;</span><br><span class="line">        mark = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Channel-双向传输网路通信"><a href="#Channel-双向传输网路通信" class="headerlink" title="Channel 双向传输网路通信"></a>Channel 双向传输网路通信</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//client端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//开启通道</span></span><br><span class="line">        SocketChannel sc = SocketChannel.open();</span><br><span class="line">        <span class="comment">//手动设置非阻塞</span></span><br><span class="line">        sc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//一旦设置为非阻塞，无论是否建立连接，都会往下执行</span></span><br><span class="line">        <span class="comment">//发起连接，channel默认是阻塞的</span></span><br><span class="line">        sc.connect(<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">8100</span>));</span><br><span class="line">        <span class="comment">//判断是否建立连接</span></span><br><span class="line">        <span class="keyword">while</span> (!sc.isConnected())&#123;</span><br><span class="line">            <span class="comment">//试图再次建立连接,这个方法会自动计数，如果多次建立无果，会自动抛出异常</span></span><br><span class="line">            sc.finishConnect();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//写出数据，都需要将数据以字节</span></span><br><span class="line">        sc.write(ByteBuffer.wrap(<span class="string">"one world one dream"</span>.getBytes()));</span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        sc.read(buffer);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> java.lang.String(buffer.array(),<span class="number">0</span>,buffer.position()));</span><br><span class="line">        sc.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//sever端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//开启通道</span></span><br><span class="line">        ServerSocketChannel ssc = ServerSocketChannel.open();</span><br><span class="line">        <span class="comment">//绑定监听端口</span></span><br><span class="line">        ssc.bind(<span class="keyword">new</span> InetSocketAddress(<span class="number">8100</span>));</span><br><span class="line">        <span class="comment">//手动设置非阻塞</span></span><br><span class="line">        ssc.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//无论是否建立连接</span></span><br><span class="line">        <span class="comment">//接受连接</span></span><br><span class="line">        SocketChannel sc = ssc.accept();</span><br><span class="line">        <span class="keyword">while</span> (sc==<span class="keyword">null</span>)&#123;</span><br><span class="line">            sc=ssc.accept();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//准备容器存储数据</span></span><br><span class="line">        ByteBuffer buffer = ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">        sc.read(buffer);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(buffer.array(),<span class="number">0</span>,buffer.position()));</span><br><span class="line">        sc.write(ByteBuffer.wrap(<span class="string">"hello sever"</span>.getBytes()));</span><br><span class="line">        ssc.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Selector-多路复用选择器"><a href="#Selector-多路复用选择器" class="headerlink" title="Selector 多路复用选择器"></a>Selector 多路复用选择器</h3></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>高并发</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>InterviewDay01</title>
    <url>/2020/03/18/interview/</url>
    <content><![CDATA[<h2 id="1-volatile是什么？"><a href="#1-volatile是什么？" class="headerlink" title="1.volatile是什么？"></a>1.volatile是什么？</h2><h3 id="volatile是一种轻量级的同步机制"><a href="#volatile是一种轻量级的同步机制" class="headerlink" title="volatile是一种轻量级的同步机制"></a>volatile是一种轻量级的同步机制</h3><h3 id="volatile有三个特性："><a href="#volatile有三个特性：" class="headerlink" title="volatile有三个特性："></a>volatile有三个特性：</h3><ol>
<li><p>可见性<br>当多线程修改物理内存种的变量值时，会把内存中的变量值拷贝到各自的工作内存中，用volatile关键字修饰的变量，当一个线程在自己的工作内存中修改完成，写入物理内存后会通知其他线程数据已经修改，这就是可见性</p>
</li>
<li><p>不保证原子性<br>在多线程都在实现如num++；可能回导致运算时加塞的情况，导致最后数据的不一致，这类可以用atomicInteger.getAndIncrement()实现原子性</p>
</li>
<li><p>禁止指令重拍<br>为了性能的优化，jvm在不改变正确语义的前提下，会对代码的执行顺序进行优化，底层进行指令的重拍，在多线程的情况下可能导致数据的错误，加上volatile可以禁止指令重拍</p>
<h2 id="Synchronized和Volatile的比较"><a href="#Synchronized和Volatile的比较" class="headerlink" title="Synchronized和Volatile的比较"></a>Synchronized和Volatile的比较</h2><p> 1）Synchronized保证内存可见性和操作的原子性<br> 2）Volatile只能保证内存可见性<br> 3）Volatile不需要加锁，比Synchronized更轻量级，并不会阻塞线程（volatile不会造成线程的阻塞；synchronized可能会造成线程的阻塞。）<br> 4）volatile标记的变量不会被编译器优化,而synchronized标记的变量可以被编译器优化（如编译器重排序的优化）.<br> 5）volatile是变量修饰符，仅能用于变量，而synchronized是一个方法或块的修饰符。<br>   volatile本质是在告诉JVM当前变量在寄存器中的值是不确定的，使用前，需要先从主存中读取，因此可以实现可见性。而对n=n+1,n++等操作时，volatile关键字将失效，不能起到像synchronized一样的线程同步（原子性）的效果。</p>
</li>
</ol>
<h2 id="单例模式在多线程环境下可能存在安全问题"><a href="#单例模式在多线程环境下可能存在安全问题" class="headerlink" title="单例模式在多线程环境下可能存在安全问题"></a>单例模式在多线程环境下可能存在安全问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//推荐使用双重检查,解决多线程单例模式的安全问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singletlon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singtlelon instance =<span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singtlon</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singtlelon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(Singtlon<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance=<span class="keyword">new</span> Singletlon();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-CAS是什么？"><a href="#2-CAS是什么？" class="headerlink" title="2.CAS是什么？"></a>2.CAS是什么？</h2><p>compare andswap 比较且交换<br>在多线程的环境下，对数据惊醒修改，会将线程工作内存的数值与物理内存的期望值相比较如果相同就交换到更新值，返回true，如果不想等，则返回false<br>底层主要是通过unsafe类来实现原子性</p>
<h2 id="3-底层是通过do-while的自旋锁实现的，在多线程高并发的情况下，导致循环时间过长，引起cpu的开销很大"><a href="#3-底层是通过do-while的自旋锁实现的，在多线程高并发的情况下，导致循环时间过长，引起cpu的开销很大" class="headerlink" title="3. 底层是通过do while的自旋锁实现的，在多线程高并发的情况下，导致循环时间过长，引起cpu的开销很大"></a>3. 底层是通过do while的自旋锁实现的，在多线程高并发的情况下，导致循环时间过长，引起cpu的开销很大</h2><p>只能保证一个变量的原子操作<br>会导致ABA问题，只关心首尾的数值，忽略中间数值已经被修改过，这样会造成数据错乱的问题</p>
<h2 id="如何解决ABA问题"><a href="#如何解决ABA问题" class="headerlink" title="如何解决ABA问题"></a>如何解决ABA问题</h2><h2 id="用AtomicStampedReference-AtomicMarkableReference原子引用解决ABA问题"><a href="#用AtomicStampedReference-AtomicMarkableReference原子引用解决ABA问题" class="headerlink" title="用AtomicStampedReference/AtomicMarkableReference原子引用解决ABA问题"></a>用AtomicStampedReference/AtomicMarkableReference原子引用解决ABA问题</h2><p>类似于版本控制，时间戳管控</p>
<h2 id="集合类不安全之并发修改异常"><a href="#集合类不安全之并发修改异常" class="headerlink" title="集合类不安全之并发修改异常"></a>集合类不安全之并发修改异常</h2><h3 id="arraylist在多线程的情况下造成安全并发的问题，常见的异常ConcurrentModificationException-并发修改异常"><a href="#arraylist在多线程的情况下造成安全并发的问题，常见的异常ConcurrentModificationException-并发修改异常" class="headerlink" title="arraylist在多线程的情况下造成安全并发的问题，常见的异常ConcurrentModificationException 并发修改异常"></a>arraylist在多线程的情况下造成安全并发的问题，常见的异常ConcurrentModificationException 并发修改异常</h3><h4 id="如何解决arraylist线程不安全的问题"><a href="#如何解决arraylist线程不安全的问题" class="headerlink" title="如何解决arraylist线程不安全的问题"></a>如何解决arraylist线程不安全的问题</h4><ol>
<li>使用vector代替arraylist，因为vector是线程安全的，底部在add方法上加入了synchronized同步锁</li>
<li>使用Collections集合工具类，调用Collections上的synchronizedList()这个方法可以解决arraylist线程不安全的问题</li>
<li>使用JUC下的CopyOnWriteArrayList这个类来解决线程不安全的问题,底层使用来lock锁来完成这一机制<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] elements = getArray();</span><br><span class="line">            E oldValue = get(elements, index);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (oldValue != element) &#123;</span><br><span class="line">                <span class="keyword">int</span> len = elements.length;</span><br><span class="line">                Object[] newElements = Arrays.copyOf(elements, len);</span><br><span class="line">                newElements[index] = element;</span><br><span class="line">                setArray(newElements);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Not quite a no-op; ensures volatile write semantics</span></span><br><span class="line">                setArray(elements);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="HsahSet底层是HashMap，因为hashset的底层将value写成来一个最终常量，hashset存储数据不关心value值"><a href="#HsahSet底层是HashMap，因为hashset的底层将value写成来一个最终常量，hashset存储数据不关心value值" class="headerlink" title="HsahSet底层是HashMap，因为hashset的底层将value写成来一个最终常量，hashset存储数据不关心value值"></a>HsahSet底层是HashMap，因为hashset的底层将value写成来一个最终常量，hashset存储数据不关心value值</h2><h2 id="基本数据类型传值（相当于复制了一份）-，对象的引用是地址的传递（相当于指针）"><a href="#基本数据类型传值（相当于复制了一份）-，对象的引用是地址的传递（相当于指针）" class="headerlink" title="基本数据类型传值（相当于复制了一份） ，对象的引用是地址的传递（相当于指针）"></a>基本数据类型传值（相当于复制了一份） ，对象的引用是地址的传递（相当于指针）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str =“aaa”<span class="comment">//存储在常量池</span></span><br><span class="line"><span class="comment">//会在常量池中找相应的值，有就找没有就会新建，注意内存的分析</span></span><br></pre></td></tr></table></figure>
<h2 id="公平锁和非公平锁"><a href="#公平锁和非公平锁" class="headerlink" title="公平锁和非公平锁"></a>公平锁和非公平锁</h2><h3 id="公平锁：线程按照指定的顺序来占锁，按顺序执行"><a href="#公平锁：线程按照指定的顺序来占锁，按顺序执行" class="headerlink" title="公平锁：线程按照指定的顺序来占锁，按顺序执行"></a>公平锁：线程按照指定的顺序来占锁，按顺序执行</h3><h3 id="非公平锁，允许其他线程加塞，上来就抢占锁，占不到按顺序执行。如synchronized"><a href="#非公平锁，允许其他线程加塞，上来就抢占锁，占不到按顺序执行。如synchronized" class="headerlink" title="非公平锁，允许其他线程加塞，上来就抢占锁，占不到按顺序执行。如synchronized"></a>非公平锁，允许其他线程加塞，上来就抢占锁，占不到按顺序执行。如synchronized</h3><h2 id="Java-ReentrantLock-而言"><a href="#Java-ReentrantLock-而言" class="headerlink" title="Java ReentrantLock 而言"></a>Java ReentrantLock 而言</h2><p>可以通过构造函数来指定是公平锁还是非公平锁，默认是非公平锁，如果参数列表指定true则为公平锁，非公平锁吞吐量比较大，执行效率高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125;.</span></span><br><span class="line"><span class="comment">     * This is equivalent to using &#123;<span class="doctag">@code</span> ReentrantLock(false)&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//含参构造</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates an instance of &#123;<span class="doctag">@code</span> ReentrantLock&#125; with the</span></span><br><span class="line"><span class="comment">     * given fairness policy.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fair &#123;<span class="doctag">@code</span> true&#125; if this lock should use a fair ordering policy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="可重入锁（ReentrantLock，递归锁）"><a href="#可重入锁（ReentrantLock，递归锁）" class="headerlink" title="可重入锁（ReentrantLock，递归锁）"></a>可重入锁（ReentrantLock，递归锁）</h2><p>定义：线程可以进入任何一个它已经拥有的锁所同步着的代码块<br>ReentrantLock and synchronized 是可重入锁，默认非公平，防止死锁，相当于用的是同一把锁</p>
<h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>定义：是指尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗cpu</p>
<h2 id="独占锁ReentrantLock和synchronized"><a href="#独占锁ReentrantLock和synchronized" class="headerlink" title="独占锁ReentrantLock和synchronized"></a>独占锁ReentrantLock和synchronized</h2><p>该锁一次只能被一个线程所占有</p>
<h2 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h2><p>多个线程同时读一个资源类没有任何问题，所以为了满足并发量，读取共享资源应该可以同时进行。</p>
<ol>
<li>读读可以共存</li>
<li>读写不可以共存</li>
<li>写写不可以共存</li>
</ol>
]]></content>
      <categories>
        <category>Interview</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>事务</title>
    <url>/2020/02/29/%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>逻辑上的一组操作，要么同时成功，要么同时失败</p>
<h2 id="事务的四大特性（ACID）"><a href="#事务的四大特性（ACID）" class="headerlink" title="事务的四大特性（ACID）"></a>事务的四大特性（ACID）</h2><ol>
<li>原子性<br>一个事务是一个不可分割的整体，要么同时成功，要么同时失败</li>
<li>一致性<br>一个事务执行之前和之后数据也应该是完整的</li>
<li>隔离性<br>多个并发的事务应该是独立的，互不影响的。</li>
<li>持久性<br>事务一旦提交，事务对数据库的影响就真实发生了，无论做任何操作，这种影响无法被撤销。<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3>脏读：<br>一个用户读取到另一个用户还未提交的数据，产生脏读<br>不可重复读<br>一个事务可以读取另一个事务已经提交的数据<br>虚读（幻读）<br>一个事务可以读取到另一个事务对整表数据增删改<h2 id="数据库事务的隔离级别"><a href="#数据库事务的隔离级别" class="headerlink" title="数据库事务的隔离级别"></a>数据库事务的隔离级别</h2>read uncommited; - 读未提交 会出现脏读，不可重复读，虚读的问题<br>read commited  -  读已提交 可以防止脏读，<br>repeatable red    可重复读  可以防止脏读和不可重复读<br>serializable  - 序列化  都可以避免，但效率低下<h2 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h2> 共享锁<br> 共享锁和共享锁可以共存<br> 共享锁和排他锁不能共存<br> 排它锁<br> 排他锁和共享锁不能共存<br> 排他锁和排他锁不能共存</li>
</ol>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE04</title>
    <url>/2020/02/28/JavaSE04/</url>
    <content><![CDATA[<hr>
<p>title: 线程<br>date: 2020-02-28<br>tags:<br>    - 分享<br>    - 导航<br>categories: Java基础<br>–</p>
<h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>为完成特定的任务，用某种语言编写一组指令的集合。一段静态的代码，静态对象</p>
<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>正在运行的程序</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>进程可以进一步细化为线程，是一个程序内部的执行路径</p>
<p>-</p>
]]></content>
  </entry>
  <entry>
    <title>JavaSE03</title>
    <url>/2020/02/28/JavaSE03/</url>
    <content><![CDATA[<hr>
<p>title: Collection(集合)<br>date: 2020-02-28<br>tags:<br>    - 分享<br>    - 导航<br>categories: Java基础<br>–</p>
<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型的本质是数据类型的参数化，在编译器阶段处理</p>
<p>-</p>
]]></content>
  </entry>
  <entry>
    <title>JVMDay01</title>
    <url>/2020/02/28/JVM/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaSE01</title>
    <url>/2020/02/26/JavaSE01/</url>
    <content><![CDATA[<h2 id="1-简单说一下什么是跨平台"><a href="#1-简单说一下什么是跨平台" class="headerlink" title="1. 简单说一下什么是跨平台"></a>1. 简单说一下什么是跨平台</h2><p>由于各种系统所支持的指令集不是完全一致，所以在操作系统上加个虚拟机可以来提供统一的接口，屏蔽系统之间的差异。<br>2.Java有几种基本数据类型<br>8种基本数据类型<br>数据类型    字节    默认值<br> byte        1     0<br> short        2    0<br> int        4    0<br> long        8    0<br> double        4    0.0d<br> float        8       0.0f<br> char        2       ‘\u0000’<br> boolean    1    false</p>
<h2 id="3-面向对象的特征"><a href="#3-面向对象的特征" class="headerlink" title="3.面向对象的特征"></a>3.面向对象的特征</h2><ol>
<li><p>封装 把描述一个对象的属性和行为封装在一个模块中，也就是封装到一个类中，用变量来定义对象的属性，用方法来定义对象的行为，方法可以直接访问同一对象的属性</p>
</li>
<li><p>继承 发生在父子类中，子类可以继承父类的特征和行为，子类继承父类的非private修饰的方法，子类也可以对父类的方法进行重写，缺点是增加了代码之间的耦合性</p>
</li>
<li><p>多态 不同子类型的对象对同一消息作出不同的响应<br>分为编译时多态和运行时多态<br>编译时多态：常见的方法的重载，也就是一个类中存在多个方法名相同，而参数列表不同的方法<br>运行时多态 方法的重写实现的是运行时多态，重写指的是子类重写父类的方法，重写的原则是，子类和父类的方法签名相同，也就是子类方法的返回值类型，方法的参数列表，以及方法名要与父类方法相同，子类抛出的异常小于等于父类抛出的异常，子类方法的访问修饰权限要&gt;=父类的访问修饰符权限，<br>向上造型：用父类型引用子类型对象，这样调用同样的方法就会根据子类对象的不同而表现出不一样的行为。</p>
</li>
<li><p>抽象<br>抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有那些属性和行为，并不关注这些行为的细节是什么？</p>
<h2 id="4-为什么要有包装类型"><a href="#4-为什么要有包装类型" class="headerlink" title="4.为什么要有包装类型"></a>4.为什么要有包装类型</h2><p>让基本数据类型也具有对象的特征。<br>jdk1.5的新的性<br>自动装箱：<code>Integer i = 1 ;</code> 把基本数据类型转化为包装类，底层用的<code>Integer.valueof(1)</code><br>自动拆箱：<code>int i =new Integer(6)</code> 把包装类型转化为基本数据类型 <code>i.intValue();</code> </p>
<h3 id="二者的区别："><a href="#二者的区别：" class="headerlink" title="二者的区别："></a>二者的区别：</h3></li>
<li><p>声明方式不同：基本类型不使用new关键字，而包装类型需要使用new关键字在堆中分配内存</p>
</li>
<li><p>存储方式及位置不同：基本类型是直接将变量存储在栈中，而包装类型是将对象放在堆中，然后通过引用来使用；</p>
</li>
<li><p>初始值不同：基本类型的初始值为0，boolean为false，而包装类型的初始值为null</p>
</li>
<li><p>使用方式不同：基本类型直接赋值直接使用就好，而包装类型在集合如Collection、Map时会使用到。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Interface(接口）</title>
    <url>/2020/02/26/JavaSE02/</url>
    <content><![CDATA[<h2 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h2><h3 id="抽象类：如果一个类中有一个或多个抽象方法，那么这个类必须是抽象类。"><a href="#抽象类：如果一个类中有一个或多个抽象方法，那么这个类必须是抽象类。" class="headerlink" title="抽象类：如果一个类中有一个或多个抽象方法，那么这个类必须是抽象类。"></a>抽象类：如果一个类中有一个或多个抽象方法，那么这个类必须是抽象类。</h3><ol>
<li>抽象类不能创建对象，因为抽象类创建对象没有意义,但可以创建抽象类的子类对象</li>
<li>子类继承抽象类需要重写抽象类中的抽象方法，如果不重写这个类必须是抽象类，否则会产生编译时异常</li>
<li>抽象类中可以没有抽象方法,</li>
<li>可以向上造型，引用父类类型创建子类对象，调用子类方法</li>
<li>abstract和static不能同时使用<br>###抽象方法：没有方法体的方法，用abstract关键字修饰<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2></li>
<li>interface关键字修饰，产生一个完全的抽象类，接口中的方法都是抽象方法，接口也不能被实例化</li>
<li>在接口中定义的方法必须被public修饰，而抽象类中的方法可以被其他访问权限修饰符修饰，如果不写java默认会用public修饰 </li>
<li>接口中的变量默认被static和final关键字修饰，可以直接被接口名调用，不能被修改</li>
</ol>
]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>LinuxDay03</title>
    <url>/2020/02/25/LinuxDay03/</url>
    <content><![CDATA[<h2 id="网络地址"><a href="#网络地址" class="headerlink" title="网络地址"></a>网络地址</h2><h3 id="配置网络的时候需要配置下面的信息"><a href="#配置网络的时候需要配置下面的信息" class="headerlink" title="配置网络的时候需要配置下面的信息"></a>配置网络的时候需要配置下面的信息</h3><ol>
<li>IP地址：PC在网络中的通信地址</li>
<li>子网掩码: 子网掩码用于划分网络，将一个IP地址中的网络位和主机位进行划分。是一个32位的地址。</li>
<li>网关： 网络的关口，用于数据转发，通常理解为路由器的地址，大部分硬件厂家默认地址，192.168.0.1 |192.168.1.1</li>
<li>DNS: 用于解析域名的作用，Domain Name System 域名解析系统<h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h3 id="静态"><a href="#静态" class="headerlink" title="静态"></a>静态</h3>优点：可以是我们PC/服务器有一个更快的解析速度。维护方式手动配置hosts文件，配置ip和域名的映射<br>缺点：hosts一般都是为本机系统所有，维护上万台的服务器的集群很困难<h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3>优点：只需要给服务器指明DNS服务器地址即可，无需手动配置hosts文件<br>缺点：有一定的响应时间（延迟），若DNS服务器党机，那么此域名就没有办法访问<h2 id="桥接模式和NAT模式的优缺点"><a href="#桥接模式和NAT模式的优缺点" class="headerlink" title="桥接模式和NAT模式的优缺点"></a>桥接模式和NAT模式的优缺点</h2><h3 id="桥接模式："><a href="#桥接模式：" class="headerlink" title="桥接模式："></a>桥接模式：</h3>优点：同一个局域网中任意一台物理机想要访问虚拟机时，只要拥有账户和密码，就可以直接进行通信<br>缺点：如果宿主主机没有连接网络，那么虚拟机也就不存在与该真实网络的环境中，换句话，虚拟机使用桥接模式的时候，它的网络依赖于宿主的网络的环境。<h3 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h3>优点：可以无视物理机网络环境，即便时物理机没有网络，也不影响本机和虚拟机进行通信。因为虚拟机真正通信网卡是VMNet8提供（网络环境）<br>缺点：其他物理机想要访问NAT模式下的虚拟机时，比较麻烦<h2 id="Linux的网络知识"><a href="#Linux的网络知识" class="headerlink" title="Linux的网络知识"></a>Linux的网络知识</h2>通过域名查看IP<br> host <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><h3 id="远程拷贝"><a href="#远程拷贝" class="headerlink" title="远程拷贝"></a>远程拷贝</h3>本机与Linux之间的文件传输，在本机的控制台上,本机的文件的路径为绝对路径<br>例如：本机传送文件到Linux中 命令：scp /Users/yuxiangrui/Desktop/1.jpg <a href="mailto:root@192.168.144.134">root@192.168.144.134</a>:/home/<br> 本机传送文件夹，命令：scp -r /Users/yuxiangrui/Desktop/1.jpg <a href="mailto:root@192.168.143.134">root@192.168.143.134</a><br> linux中传送文件到本机 scp <a href="mailto:root@92.168.143.134">root@92.168.143.134</a>：/home/1.jpg /Users/yuxiangrui/Desktop/<br> linux中传送文件夹到本机 scp -r <a href="mailto:root@92.168.143.134">root@92.168.143.134</a>：/home/1.jpg /Users/yuxiangrui/Desktop/<h3 id="登陆远程服务器"><a href="#登陆远程服务器" class="headerlink" title="登陆远程服务器"></a>登陆远程服务器</h3> ssh <a href="mailto:root@192.168.143.134">root@192.168.143.134</a><h2 id="SSH免密登陆"><a href="#SSH免密登陆" class="headerlink" title="SSH免密登陆"></a>SSH免密登陆</h2>Linux免密登陆使用的RSA算法<br> RSA本身是一种非对称加密算法，会生成公钥和私钥<br>生成密钥<br> ssh-keygen<br>这样.ssh目录下就会有公钥和私钥的文件<br> 将公钥注册到其他服务器上<br>ssh-copy-id {UserName}@IP<h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2> wget <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a><h2 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h2>ps -aux<h2 id="查询特定的进程"><a href="#查询特定的进程" class="headerlink" title="查询特定的进程"></a>查询特定的进程</h2>ps -aux｜grep sshd</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>LinuxDay02</title>
    <url>/2020/02/24/LinuxDay02/</url>
    <content><![CDATA[<h2 id="用户、用户组概念"><a href="#用户、用户组概念" class="headerlink" title="用户、用户组概念"></a>用户、用户组概念</h2><h2 id="Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户都必须首先向系统管理员申请账号，然后以这个账号的身份进入系统。用户在登陆时建入正确的用户名和口令后，就能够进入系统和自己的主目录。"><a href="#Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户都必须首先向系统管理员申请账号，然后以这个账号的身份进入系统。用户在登陆时建入正确的用户名和口令后，就能够进入系统和自己的主目录。" class="headerlink" title="Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户都必须首先向系统管理员申请账号，然后以这个账号的身份进入系统。用户在登陆时建入正确的用户名和口令后，就能够进入系统和自己的主目录。"></a>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户都必须首先向系统管理员申请账号，然后以这个账号的身份进入系统。用户在登陆时建入正确的用户名和口令后，就能够进入系统和自己的主目录。</h2><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><h2 id="gt-gt-gt-用法"><a href="#gt-gt-gt-用法" class="headerlink" title="&gt; &gt;&gt; 用法"></a>&gt; &gt;&gt; 用法</h2><p>ls -l &gt; a.txt 把显示的内容覆盖写入a.txt，如果没有这个文件则创建此文件</p>
<blockquote>
<blockquote>
<p>追加，例如ls -l &gt;&gt; a.txt把当前显示的内容追加到a.txt的末尾。</p>
</blockquote>
</blockquote>
<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><p>输出打印 echo “hello”</p>
<h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>显示文件的前10行head -n 10 /etc/peofile</p>
<h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>tail -n 5 /etc/profile 查看文件的后5行<br>tail -f 实时监控文件是否变化</p>
<h2 id="chmod-修改用户的权限"><a href="#chmod-修改用户的权限" class="headerlink" title="chmod 修改用户的权限"></a>chmod 修改用户的权限</h2><p>4:可读 2:可写 1:可执行0:没有任何权限 设定用户权限可读可写可执行，用户组全前线可读可执行 其他没有权限 chmod 750 文件or文件夹</p>
<h2 id="usermod-将用户加入用户组"><a href="#usermod-将用户加入用户组" class="headerlink" title="usermod 将用户加入用户组"></a>usermod 将用户加入用户组</h2><p>usermod -g A zhangsan 将张三加入A组中</p>
<h2 id="chown-修改文件目录属主"><a href="#chown-修改文件目录属主" class="headerlink" title="chown 修改文件目录属主"></a>chown 修改文件目录属主</h2><p>chown root：big  A 将A的属主改成big</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Web总结</title>
    <url>/2020/02/21/Web/</url>
    <content><![CDATA[<h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><ol>
<li>背景<br> web开发是通过HTTP协议实现的<br> Http协议的特点：<br> a. 基于请求相应模型<br> b. 一次请求对应一次响应<br> c. 请求只能由客户端发出，服务器端只能被动等待请求作出响应<br>基于这样的特点，网站只能实现同步请求，全部刷新的效果，但实际生活中需要在不影响正在展示的内容的情况下还要保证服务器不停的向客户端发送最新的数据，这只靠HTTP协议无法完成，所以AJAX的技术应运而生。</li>
</ol>
<hr>
<ol start="2">
<li>特点<br> AJAX技术实现：异步请求，局部刷新。<br>AJAX不是一项新的技术，而是多个已有的技术整合实现的，其原理就是在页面的js中通过代码在不影响当前页面的情况下向服务器发送请求，得到服务器传递的最新数据后再通过js更新当前页面的局部内容。<br> AJAX仍然是基于HTTP协议，没有违背HTTP协议的原理</li>
</ol>
<hr>
<ol start="3">
<li>jquery方式实现AJAX<br> a. 通用方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getTime() &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:&quot;post&quot;,</span><br><span class="line">                url:&quot;&#x2F;ExecDemo01_war_exploded&#x2F;TimeServlet&quot;,</span><br><span class="line">                data:&quot;&quot;,</span><br><span class="line">                success: function (msg) &#123;</span><br><span class="line">                    $(&quot;#d01&quot;).text(msg)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
 b. get方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*get方式*&#x2F;</span><br><span class="line">        function getTime1()&#123;</span><br><span class="line">            $.get(&quot;&#x2F;ExecDemo01_war_exploded&#x2F;TimeServlet&quot;,function (msg) &#123;</span><br><span class="line">                $(&quot;#d01&quot;).text(msg)</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
 c. post方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*post方式*&#x2F;</span><br><span class="line">        function getTime2()&#123;</span><br><span class="line">            $.post(&quot;&#x2F;ExecDemo01_war_exploded&#x2F;TimeServlet&quot;,function (msg) &#123;</span><br><span class="line">                $(&quot;#d01&quot;).text(msg)</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
 d. getJSON方式<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*getJSON方式*&#x2F;</span><br><span class="line">        function getTime3()&#123;</span><br><span class="line">            $.getJSON(&quot;&#x2F;ExecDemo01_war_exploded&#x2F;TimeServlet&quot;,function (obj) &#123;</span><br><span class="line">                $(&quot;#d01&quot;).text(obj.time)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2></li>
<li>概述<br> 基于TCP协议的应用层协议。<br> 是客户端的和服务器通信的常用协议。</li>
<li>规则<br> a. 基本规则<br> 基于请求响应模型<br> 一次请求对应一次响应<br> 请求只能由客户端发出，服务器端被动接受请求作出响应<br> 请求：<br> 一个请求行<br> GET /index.html HTTP/1.1<br> 请求方式<br> 请求方式（8种），最常见的是GET和POST请求<pre><code>        8种请求方式：opions get post put head delete trace connect
GET请求：请求参数在地址栏上拼接，相对安全性较差传输的数据量有限
POST请求：请求参数在实体内容中传输，相对安全性较高，传输的数据量理论上没</code></pre>有限制。<pre><code>请求的资源地址
使用的协议版本
1.0 每次请求都要重新创建连接，完成请求响应断开连接，效率低
1.1 在一次请求响应结束后，可以选择保持底层连接，如果后续请求到来可以复用</code></pre>底层连接，效率高<pre><code>请求头：
Accept：浏览器可以接受的MIME类型
Accept-Charset：浏览器可接受的字符集
Accept-Encoding：浏览器能够进行解码的数据编码方式，比如说gzip，Servlet能</code></pre>够向支持的gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10被的下&gt;载的时间<pre><code>Accept-Language:浏览器可以接受的语言种类
Connection：表示是否需要持久连接，HTTP默认KeepAlive
Content-Length：表示请求消息正文的长度
Cookie：存放缓存信息
Host：初始URL中的主机和端口
If-Modified—Since：只有当所请求的内容在指定的日期之后又经过修改才返回他&gt;，否则返回304NotModified</code></pre> Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝<br> Referer：包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。<br> User-Agent：浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用；</li>
</ol>
<hr>
<p>一个空白行<br>    存在的目的是将请求头和实体内容分割开<br>实体内容<br>    要向服务器传递数据<br>    GET提交时，实体内容为空，post提交时，请求参数在实体内容中传输HTTP协议只支持ISO8859-1（Latin1）编码，此编码集只有英文数字常见的符号，所以必须要通过URL解决乱码问题<br>    c.响应<br>    一个状态行<br>    HTTP/1.1200 ok<br>    使用的协议<br>    状态码<br>    1XX 临时响应<br>    2XX 成功 200成功<br>    3XX 重定向 302重定向304/307使用缓存<br>    4XX 请求错误 找不到资源<br>    5XX 服务器错误 500服务器错误</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>LinuxDay01</title>
    <url>/2020/02/20/LinuxDay01/</url>
    <content><![CDATA[<h2 id="Linux简介"><a href="#Linux简介" class="headerlink" title="Linux简介"></a>Linux简介</h2><pre><code>Linux是一款操作系统，它是由unix演变而来的，创始人是芬兰当时的大学生肯.汤</code></pre><p>普森写的一款操作系统，Linux具有开源免费的特点，现在广泛运用于服务器端。</p>
<h3 id="Linux的优势"><a href="#Linux的优势" class="headerlink" title="Linux的优势"></a>Linux的优势</h3><pre><code>相较于Windows而言Linux更加的安全，更加的高效,对网络有良好的支持性，稳定，低成本，可以很好的解决多并发的问题。</code></pre><hr>
<h3 id="2-创建虚拟机（空间）"><a href="#2-创建虚拟机（空间）" class="headerlink" title="2.创建虚拟机（空间）"></a>2.创建虚拟机（空间）</h3><pre><code>#### 配置网络连接时有三种形式：</code></pre><ul>
<li>1.桥连接：Linux可以和任意系统进行通信，但是可能造成ip冲突的问题</li>
<li>2.NAT：网络地址的转化方式，linux可以访问外网但外网不可以直接访问Linux</li>
<li>3.主机模式：Linux是独立的主机不可以访问外网</li>
</ul>
<hr>
<h3 id="3-Linux的目录结构"><a href="#3-Linux的目录结构" class="headerlink" title="3.Linux的目录结构"></a>3.Linux的目录结构</h3><pre><code>Linux的文件是采用级层式的树状目录，在此结构中的最上层是根目录“/”,然后在&gt;此目录下再创建其他的目录
$\color{#FF0000}{在linux的世界里，一切皆文件}$</code></pre><h3 id="常见的命令"><a href="#常见的命令" class="headerlink" title="常见的命令"></a>常见的命令</h3>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatisDay01</title>
    <url>/2020/02/06/MyBatisDay01/</url>
    <content><![CDATA[<h2 id="mybatis的概述"><a href="#mybatis的概述" class="headerlink" title="mybatis的概述"></a>mybatis的概述</h2><pre><code>mybatis是一个数据访问层的框架，用java编写的。
它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等复杂过程，是一种半自动对象表的Dao层框架
它使用了ORM思想实现了结果集的封装。</code></pre><h3 id="优点可以手写sql灵活实现数据访问，自动封装数据，减少代码的冗余"><a href="#优点可以手写sql灵活实现数据访问，自动封装数据，减少代码的冗余" class="headerlink" title="优点可以手写sql灵活实现数据访问，自动封装数据，减少代码的冗余"></a>优点可以手写sql灵活实现数据访问，自动封装数据，减少代码的冗余</h3><h2 id="ORM思想："><a href="#ORM思想：" class="headerlink" title="ORM思想："></a>ORM思想：</h2><h3 id="Object-Relational-Mapping-（对象关系映射）"><a href="#Object-Relational-Mapping-（对象关系映射）" class="headerlink" title="Object Relational Mapping （对象关系映射）"></a>Object Relational Mapping （对象关系映射）</h3>]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2020/02/01/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><h3 id="定义：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）"><a href="#定义：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）" class="headerlink" title="定义：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）"></a>定义：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）</h3><h4 id="简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例"><a href="#简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例" class="headerlink" title="简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例"></a>简单工厂模式是由一个工厂对象决定创建出哪一种产品类的实例</h4>]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Patterns</title>
    <url>/2020/01/31/Design-Patterns/</url>
    <content><![CDATA[<h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><h3 id="设计模式分为三种类型，共23种"><a href="#设计模式分为三种类型，共23种" class="headerlink" title="设计模式分为三种类型，共23种"></a>设计模式分为三种类型，共23种</h3><ul>
<li>创建型模式：单例模式，抽象工厂模式，工厂模式，原型模式，建造者模式。</li>
<li>结构型模式：适配器模式，装饰者模式，桥接模式，组合模式，外观模式，享元模式，代理模式</li>
<li>行为型模式：模版方法模式，命令模式，访问者模式，迭代器模式，观察者模式，备忘录模式，解释器模式（interpreter模式），状态模式，策略模式，职责链模式（责任链）模式。<h2 id="设计模式常用的七大原则"><a href="#设计模式常用的七大原则" class="headerlink" title="设计模式常用的七大原则"></a>设计模式常用的七大原则</h2><h3 id="1-单一职责原则"><a href="#1-单一职责原则" class="headerlink" title="1.单一职责原则"></a>1.单一职责原则</h3></li>
<li>降低类的复杂度，一个类只负责一项职责</li>
<li>便于后期的代码的维护，提高代码的刻度性</li>
<li>降低后期因变更而引起的风险</li>
<li>通常情况下我们应该遵循单一职责原则，但在一个类中方法较少的时候，我们可以在方法的级别保持单一职责原则即可</li>
</ul>
<hr>
<h3 id="2-接口隔离原则"><a href="#2-接口隔离原则" class="headerlink" title="2. 接口隔离原则"></a>2. 接口隔离原则</h3><ul>
<li>一个类通过接口依赖另一个类，该接口应该是最小接口，也就是通过接口的隔离保证类中不需要接口中多余的方法，如果接口中有用不到的方法，就把这个接口中拆分成多个小接口，避免造成浪费。</li>
</ul>
<hr>
<h3 id="3-依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3-依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3. 依赖倒转原则（Dependence Inversion Principle）"></a>3. 依赖倒转原则（Dependence Inversion Principle）</h3><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependcyIversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">        person.receive(<span class="keyword">new</span> Weixin());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Ireceiver</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">Ireceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weixin</span> <span class="keyword">implements</span> <span class="title">Ireceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"one world,one dream"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Ireceiver ireceiver)</span> </span>&#123;</span><br><span class="line">        System.out.println(ireceiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//总结：通过类与接口发生依赖，与子实现类没有关系，这样便于后期的修改，这就是面向接口编程的思想</span></span><br></pre></td></tr></table></figure>
<ul>
<li>低层模块最好是抽象类或者接口，这样程序会更稳定</li>
<li>变量声明类型尽量是抽象类或接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利用程序扩展和优化</li>
<li>继承时遵循里氏替换原则</li>
</ul>
<h3 id="4-里氏替换原则"><a href="#4-里氏替换原则" class="headerlink" title="4. 里氏替换原则"></a>4. 里氏替换原则</h3><ul>
<li>继承增加了程序的耦合性</li>
<li>子类尽量不要重写父类的方法，如果需要重写，就通过依赖，组合，聚合的方法，提升一个基类，让原有的父类和子类继承这个基类<h4 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span> + a.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1-8="</span> + a.fun1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"11+3="</span> + b.fun1(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"1+8="</span> + b.fun1(<span class="number">1</span>, <span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"11+3+9="</span> + b.fun2(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span> + b.fun3(<span class="number">11</span>, <span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 - num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//B类继承了A</span></span><br><span class="line"><span class="comment">//增加了一个新功能：完成两个数相加，然后和9求和</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="comment">//通过依赖的方式与类A发生关系</span></span><br><span class="line">    <span class="keyword">private</span> A a = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun1</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fun1(a, b) + <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fun3</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.a.fun1(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-开闭原则-ocp-open-closed-principle"><a href="#5-开闭原则-ocp-open-closed-principle" class="headerlink" title="5. 开闭原则 ocp(open closed principle)"></a>5. 开闭原则 ocp(open closed principle)</h3></li>
<li>是编程中最基础，最重要的设计原则<h3 id="6-迪米特法则（最少知道原则）"><a href="#6-迪米特法则（最少知道原则）" class="headerlink" title="6. 迪米特法则（最少知道原则）"></a>6. 迪米特法则（最少知道原则）</h3></li>
<li>降低类之间的耦合，对自己依赖的类知道的越少越好</li>
<li>降低类间（对象间）耦合关系，并不是要求完全没有依赖关系</li>
<li>直接朋友，出现在成员变量，方法参数，方法返回值，如果出现在局部变量中则是陌生朋友<h3 id="7-合成复用原则"><a href="#7-合成复用原则" class="headerlink" title="7. 合成复用原则"></a>7. 合成复用原则</h3></li>
<li>原则是尽量使用合成/聚合的方式，而不是使用继承<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">        d.setAnimal();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在跑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在睡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在吃"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方式一依赖</span></span><br><span class="line"><span class="comment">/*class Dog &#123;</span></span><br><span class="line"><span class="comment">    public void action(Animal animal)&#123;</span></span><br><span class="line"><span class="comment">        animal.run();</span></span><br><span class="line"><span class="comment">        animal.eat();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//方式二聚合</span></span><br><span class="line"><span class="comment">/*class Dog &#123;</span></span><br><span class="line"><span class="comment">    private Animal animal;</span></span><br><span class="line"><span class="comment">    public void setAnimal(Animal animal)&#123;</span></span><br><span class="line"><span class="comment">        animal.eat();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//方式三：组合</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Animal animal = <span class="keyword">new</span> Animal();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        animal.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDay01</title>
    <url>/2020/01/29/SpringDay01/</url>
    <content><![CDATA[<h2 id="框架（半成品软件）"><a href="#框架（半成品软件）" class="headerlink" title="框架（半成品软件）"></a>框架（半成品软件）</h2><pre><code>高度抽取可重用代码的一种设计，高度的通用性;
框架：抽取成一种高度可重用的；事务控制，强大的servlet，项目中的一些工具。
    框架：多个可重用模块的集合，形成一个某个领域的整体解决方案；</code></pre><h2 id="常见的框架"><a href="#常见的框架" class="headerlink" title="常见的框架"></a>常见的框架</h2><h3 id="SSH（老三大框架）"><a href="#SSH（老三大框架）" class="headerlink" title="SSH（老三大框架）"></a>SSH（老三大框架）</h3><pre><code>Struts2
Spring
Hibernate</code></pre><h3 id="SSM（新三大框架）"><a href="#SSM（新三大框架）" class="headerlink" title="SSM（新三大框架）"></a>SSM（新三大框架）</h3><pre><code>SpringMVC(WEB)
Spring（Service）
Mybatis（Dao）</code></pre><hr>
<h2 id="Spring-框架"><a href="#Spring-框架" class="headerlink" title="Spring 框架"></a>Spring 框架</h2><p>Spring是一个service层的框架，可以整合其他框架</p>
<h3 id="容器（可以管理所有的组件（类））框架；"><a href="#容器（可以管理所有的组件（类））框架；" class="headerlink" title="容器（可以管理所有的组件（类））框架；"></a>容器（可以管理所有的组件（类））框架；</h3><h3 id="核心关注：IOC和AOP"><a href="#核心关注：IOC和AOP" class="headerlink" title="核心关注：IOC和AOP"></a>核心关注：IOC和AOP</h3><pre><code>IOC：- 控制反转
AOP：- 面向切面编程</code></pre><h3 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h3><p>第一步:先导入jar包</p>
<p>第二步:配置Spring容器约束文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person01"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Person01"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person02"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Person01"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="案例一-1"><a href="#案例一-1" class="headerlink" title="案例一"></a>案例一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* spring 容器底层默认通过读取配置文件的类的全路径名，通过反射来创建对象</span></span><br><span class="line"><span class="comment">* 并保存到Spring容器的Map内存中并且通过键值对的形式储存，降低了程序的耦合性</span></span><br><span class="line"><span class="comment">* 通过getbean方法容器中找到匹配的键值对，来创建实例，多次获取同一个id的实例是同一个实例*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化容器,ApplicationContext是接口创建实现类对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext"</span>);</span><br><span class="line">        <span class="comment">//获取bean，获得对象</span></span><br><span class="line">        Person01 p = (Person01) context.getBean(<span class="string">"person01"</span>);</span><br><span class="line">        <span class="comment">//调用p的方法</span></span><br><span class="line">        p.eat();</span><br><span class="line">        p.sleep();</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="comment">//关闭容器</span></span><br><span class="line">        ((ClassPathXmlApplicationContext) context).close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果配置文件中包含两个id则会抛出异常 BeanDefinitionParsingException,</span></span><br><span class="line">    <span class="comment">// 这是因为Spring容器在存储对象时默认以键值对的形式存储的不能出现相同的key值</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Person01 p = (Person01) context.getBean(<span class="string">"person01"</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Spring容器中可以包含相同的class属性，对应不同的id,且获取的是不同的实例*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Person01 p1 = (Person01) context.getBean(<span class="string">"person01"</span>);</span><br><span class="line">        Person01 p2 = (Person01) context.getBean(<span class="string">"person02"</span>);</span><br><span class="line">        System.out.println(p1);<span class="comment">//cn.tedu.domain.Person01@6e0e048a</span></span><br><span class="line">        System.out.println(p2);<span class="comment">//cn.tedu.domain.Person01@5bc79255</span></span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        ((ClassPathXmlApplicationContext) context).close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="案例二：创建bean的方式"><a href="#案例二：创建bean的方式" class="headerlink" title="案例二：创建bean的方式"></a>案例二：创建bean的方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建bean</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * Spring中默认是调用类的无参构造构造,通过反射来创建bean的</span></span><br><span class="line"><span class="comment">    * 如果没有无参构造构造就不能直接配置类的全路径名获得bean*/</span></span><br><span class="line">    <span class="comment">//Spring创建bean，没有无参构造构造，默认创建失败</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span> </span>&#123;</span><br><span class="line">    <span class="comment">//java.lang.NoSuchMethodException:没有默认的无参构造</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Person01 p = (Person01) context.getBean(<span class="string">"person01"</span>);</span><br><span class="line">        System.out.println(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过反射创建对象</span></span><br><span class="line">    <span class="comment">//java.lang.InstantiationException: cn.tedu.domain.Person01</span></span><br><span class="line">    <span class="comment">//直接用clz.newstance,默认调用无参构造但只有含参数构造会抛出异常</span></span><br><span class="line">    <span class="comment">// Caused by: java.lang.NoSuchMethodException: cn.tedu.domain.Person01.&lt;init&gt;()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clz = Class.forName(<span class="string">"cn.tedu.domain.Person01"</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = clz.getConstructor(String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Person01 p = (Person01) constructor.newInstance(<span class="string">"reason"</span>);</span><br><span class="line">        System.out.println(p);<span class="comment">//cn.tedu.domain.Person01@1edf1c96</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//普通方法创建对象</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Person01 person01 = <span class="keyword">new</span> Person01(<span class="string">"xx"</span>);</span><br><span class="line">        System.out.println(person01);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="案例三：利用工厂获取bean"><a href="#案例三：利用工厂获取bean" class="headerlink" title="案例三：利用工厂获取bean"></a>案例三：利用工厂获取bean</h3><h4 id="1-静态工厂"><a href="#1-静态工厂" class="headerlink" title="1. 静态工厂"></a>1. 静态工厂</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置静态工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person01"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.factory.Person01StaticFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getInstance"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建静态工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person01StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造方法，不让外界随意的创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Person01StaticFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//对外界提供公共的静态的getInstance的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Person01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person01(<span class="string">"reason"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试静态工厂</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        Person01 person01 = (Person01) context.getBean(<span class="string">"person01"</span>);</span><br><span class="line">        System.out.println(person01);<span class="comment">//cn.tedu.domain.Person01@3b084709</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-实例工厂"><a href="#2-实例工厂" class="headerlink" title="2. 实例工厂"></a>2. 实例工厂</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置实例工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person01InstanceFactory"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.factory.Person01InstanceFactory"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person01"</span> <span class="attr">factory-bean</span>=<span class="string">"person01InstanceFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getInstance"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建实例工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person01InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person01 <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person01(<span class="string">"xx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试实例工厂</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext1.xml"</span>);</span><br><span class="line">        Person01 person01 = (Person01) context.getBean(<span class="string">"person01"</span>);</span><br><span class="line">        System.out.println(person01);<span class="comment">//cn.tedu.domain.Person01@3b084709</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-Spring工厂"><a href="#3-Spring工厂" class="headerlink" title="3. Spring工厂"></a>3. Spring工厂</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置Spring工厂--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person01"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.factory.Person01SpringFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建SpringFactory需要实现FactoryBean接口指定泛型为获取实例的泛型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person01SpringFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span>&lt;<span class="title">Person01</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Person01 <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//返回person01实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Person01(<span class="string">"xx"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="comment">//返回实例的class对象</span></span><br><span class="line">        <span class="keyword">return</span> Person01<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//是否是单例，Spring默认全局只有一个实例</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试Spring工厂</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext2.xml"</span>);</span><br><span class="line">        Person01 person01 = (Person01) context.getBean(<span class="string">"person01"</span>);</span><br><span class="line">        System.out.println(person01);<span class="comment">//cn.tedu.domain.Person01@23e028a9</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVCDay01</title>
    <url>/2020/01/29/MyBatisday02/</url>
    <content><![CDATA[<h2 id="1-SpringMVC概述"><a href="#1-SpringMVC概述" class="headerlink" title="1.SpringMVC概述"></a>1.SpringMVC概述</h2><h3 id="SpringMVC是一个WEB层，控制层框架，主要用来负责与客户端交互，业务逻辑的调用。SpringMVC是Spring家族的一大组件，Spring整合SpringMVC可以做到无缝集成，特点：简单易用性能佳"><a href="#SpringMVC是一个WEB层，控制层框架，主要用来负责与客户端交互，业务逻辑的调用。SpringMVC是Spring家族的一大组件，Spring整合SpringMVC可以做到无缝集成，特点：简单易用性能佳" class="headerlink" title="SpringMVC是一个WEB层，控制层框架，主要用来负责与客户端交互，业务逻辑的调用。SpringMVC是Spring家族的一大组件，Spring整合SpringMVC可以做到无缝集成，特点：简单易用性能佳"></a>SpringMVC是一个WEB层，控制层框架，主要用来负责与客户端交互，业务逻辑的调用。SpringMVC是Spring家族的一大组件，Spring整合SpringMVC可以做到无缝集成，特点：简单易用性能佳</h3><h2 id="2-SpringMVC相对与Servlet的优势"><a href="#2-SpringMVC相对与Servlet的优势" class="headerlink" title="2.SpringMVC相对与Servlet的优势"></a>2.SpringMVC相对与Servlet的优势</h2><p>a. Servlet的开发配置相对麻烦，servlet特别多的时候web.xml文件将会非常的臃肿<br>b. 每个Servlet都只能处理一个功能，如果需要多个功能就需要开发多个servlet，项目中存在大量的servlet显得臃肿。<br>c. 获取请求参数进行类型转换封装数据到bean的过程比较繁琐。<br>d. 其他开发中不方便的地方，例如乱码问题，数据格式处理，表单检索</p>
<h2 id="spring-MVC详解"><a href="#spring-MVC详解" class="headerlink" title="spring MVC详解"></a>spring MVC详解</h2><ol>
<li>SpringMVC的组件<br>a. 前端控制器（DispatcherServlet）<br> 本质上是一个servlet，相当于一个中转站，所有的访问都会走到这个servlet中，再根据配置进行中转到相对应的handler中进行处理，获取数据和视图<br>b. 处理器映射器（HandlerMapping）<br> 本质上就是一段映射关系，将将访问路径和对应的Handler存储为映射关系，在需要时供前端控制器查阅。<br>c. 处理器适配器（HandlerAdapter）<br> 本质上就是一个适配器，可以根据要求找到对应的handler来运行。前端控制器找到处理器映射器找到对应的handler信息之后，将请求响应和对应的handler信息交由处理器适配器来处理，处理器适配器找到真正的handler执行后，将结果也就是model and view返回给前端控制器。<br>d. 视图解析器（ViewResolver）<br> 本质上是一种映射关系，可以将视图名称映射到真正的视图地址。前端控制器调用处理器适配完成后的到model和view，将view信息传给视图解析器得到真正的view。<br>e. 视图（view）<br> 本质上就是将handler处理器中返回的model数据嵌入到视图解析后得到的jsp页面中，向客户端作出响应<h3 id="生成SpringMvc的核心配置文件"><a href="#生成SpringMvc的核心配置文件" class="headerlink" title="生成SpringMvc的核心配置文件"></a>生成SpringMvc的核心配置文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动配置核心文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置处理器映射器中的路径和处理器的映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello.action"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.web.Hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建类实现controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建modelAndView</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"msg1"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"msg2"</span>,<span class="string">"hello springMVC"</span>);</span><br><span class="line">        <span class="comment">//封装视图</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">//返回modelAndView</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringMVC注解方式配置"><a href="#SpringMVC注解方式配置" class="headerlink" title="SpringMVC注解方式配置"></a>SpringMVC注解方式配置</h2> SpringMVC支持使用注解方式配置，比配置文件更加的灵活易用，是目前的主流配置方式<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器中视图名称和真正页面的映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动配置核心文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/my01"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test01.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"one word one dream"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test01"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="springMVC注解工作原理"><a href="#springMVC注解工作原理" class="headerlink" title="springMVC注解工作原理"></a>springMVC注解工作原理</h3></li>
<li>当服务器启动时，会先加载web.xml文件，之后通过引入核心配置文件来加载SpringMVC.xml</li>
<li>当解析到包扫描时，扫描指定的包，并将含有@Conteoller注解的类解析为处理器</li>
<li>如果配置过<a href="mvc:annotation-driven">mvc:annotation-driven</a>就会解析Spring-MVC注解</li>
<li>解析@requestMapping（value=“/test01.action”），将指定的地址和当前方法的映射关系保存</li>
<li>当客户端发出请求访问时，SpringMVC寻找改地址的映射关系，找到就执行方法，找不到抛出404</li>
</ol>
<h3 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求参数：日期数据处理</span></span><br><span class="line"><span class="comment">     *  通过注册自定义类型编辑器使SpringMVC支持自定义格式请求参数的处理</span></span><br><span class="line"><span class="comment">     *  此处，SpringMVC为Date类型已经提供了编辑器类，所以直接使用，不用自己写</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01test09.jsp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInitBinder</span><span class="params">(ServletRequestDataBinder dataBinder)</span></span>&#123;</span><br><span class="line">        dataBinder.registerCustomEditor(Date.class,new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"),true));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test09.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">(String name, <span class="keyword">int</span> age, Date birthday)</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        String format1 = format.format(birthday);</span><br><span class="line">        System.out.println(format1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求参数：中文乱码解决</span></span><br><span class="line"><span class="comment">     *     如果服务器配置的编码是utf-8,且项目采用的也是utf-8则默认请求参数无乱码</span></span><br><span class="line"><span class="comment">     *     tomcat8默认编码为utf-8(可以更改)</span></span><br><span class="line"><span class="comment">     *     tomcat7及更老的版本默认编码为iso8859-1(可以更改)</span></span><br><span class="line"><span class="comment">     *     如果遇到服务器编码和项目编码不一致时会产生乱码</span></span><br><span class="line"><span class="comment">     *     对于POST提交 可以通过request.setCharacterEncoding("utf-8")解决乱码</span></span><br><span class="line"><span class="comment">     *     但此行代码对GET无效，GET提交的请求参数乱码，只能手工编解码来解决</span></span><br><span class="line"><span class="comment">     *     手工编解码解决乱码的方式对POST提交也有效</span></span><br><span class="line"><span class="comment">     *     springmvc提供了过滤器CharacterEncodingFilter来帮助我们解决乱码</span></span><br><span class="line"><span class="comment">     *     但此过滤器本质上就是request.setCharacterEncoing()所以也是只对POST有效</span></span><br><span class="line"><span class="comment">     *     ,即使配置了GET提交乱码也要手动解决</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test08.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">//POST提交</span></span><br><span class="line">        <span class="comment">//request.setCharacterEncoding("utf-8");</span></span><br><span class="line">        <span class="comment">//String uname = request.getParameter("uname");</span></span><br><span class="line">        <span class="comment">//System.out.println(uname);</span></span><br><span class="line">        <span class="comment">//GET提交</span></span><br><span class="line">        <span class="comment">//String uname = request.getParameter("uname");</span></span><br><span class="line">        <span class="comment">//byte [] data = uname.getBytes("iso8859-1");</span></span><br><span class="line">        <span class="comment">//uname = new String(data,"utf-8");</span></span><br><span class="line">        <span class="comment">//System.out.println(uname);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    获取请求参数：多个同名请求参数的处理</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test07.action?name=tt&amp;love=bb&amp;love=pp&amp;love=zz</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test07.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">(String name,String [] love)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//封装到数组里</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(Arrays.asList(love));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数：自动封装请求参数到bean 对复杂类型的处理</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test06.action?id=35&amp;name=jj&amp;age=18&amp;addr=cd&amp;dog.name=wd&amp;dog.age=1&amp;dog.cat.name=xx&amp;dog.cat.age=3</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test06.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数：自动封装请求参数到bean 对复杂类型的处理</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test05.action?id=35&amp;name=jj&amp;age=18&amp;addr=cd&amp;dog.name=wd&amp;dog.age=1</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test05.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数：自动封装请求参数到bean</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test04.action?id=35&amp;name=jj&amp;age=18&amp;addr=cd</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test04.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数: 通过@RequestParam指定参数赋值,解决请求参数名和方法参数不一致时赋值问题</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test03.action?name=yasuo&amp;uage=19</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test03.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"uage"</span>)</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">"~~~~"</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数: 直接获取</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test02.action?username=yasuo&amp;age=19</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test02.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">"~~~~"</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数：传统方式获取</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test01.action?username=yasuo&amp;age=19</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test01.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(request.getParameter(<span class="string">"age"</span>));</span><br><span class="line">        System.out.println(username + <span class="string">"~~~~"</span> + age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDay04</title>
    <url>/2020/01/29/SpringDay04/</url>
    <content><![CDATA[<h2 id="SpringAOP"><a href="#SpringAOP" class="headerlink" title="SpringAOP"></a>SpringAOP</h2><h3 id="1-Spring-aop的基本概念"><a href="#1-Spring-aop的基本概念" class="headerlink" title="1. Spring aop的基本概念"></a>1. Spring aop的基本概念</h3><h4 id="连接点"><a href="#连接点" class="headerlink" title="连接点"></a>连接点</h4><ul>
<li>连接点（Joinpoint）：在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候。在Spring AOP中，一个连接点总是表示一个方法的执行。<ul>
<li>通俗讲：<ul>
<li>层与层之间方法调用的过程称之为连接点</li>
</ul>
</li>
</ul>
</li>
<li>切入点（Pointcut）：匹配连接点的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心。核心：Spring缺省使用AspectJ切入点语法。<ul>
<li>通俗讲<ul>
<li>在连接点的基础上 增加上切入规则 选择出需要进行增强的连接点 这些基于切入规则选出来的<br>连接点 就称之为切入点。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="切面"><a href="#切面" class="headerlink" title="切面"></a>切面</h4><ul>
<li>切面（Aspect）：一个关注点的模块化，这个关注点可能会横切多个对象。事务管理是J2EE应用<br>中一个关于横切关注点的很好的例子。在Spring AOP中，切面可以使用基于模式）或者基于<br>@Aspect注解的方式来实现。</li>
</ul>
<h4 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h4><ul>
<li>通知（Advice）：在切面的某个特定的连接点上执行的动作。其中包括了 “around”、“before”和“after”等不同类型的通知（通知的类型将在后面部分进行讨论）。许多AOP框架（包括Spring）都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。<ul>
<li>通俗讲：<ul>
<li>在spring底层的代理拦截下切入点后，将切入点交给切面类，切面类中就要有处理这些切入点的方法，这些方法就称之为通知（也叫增强 增强方法）。针对于切入点执行的过程，通知还分为不同的类型，分别关注切入点在执行过程中的不同的时机。<h4 id="目标对象"><a href="#目标对象" class="headerlink" title="目标对象"></a>目标对象</h4></li>
</ul>
</li>
</ul>
</li>
<li>目标对象（Target Object）： 被一个或者多个切面所通知的对象。也被称做被通知（advised）对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远是一个被代理（proxied）对象<ul>
<li>通俗讲：就是真正希望被访问到的对象。spring底层的动态代理对他进行了代理，具体能不能真的访问到目标对象，或在目标对象真正执行之前和之后是否做一些额外的操作，取决于切面。<h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"firstAspect"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置通知方法--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"myBefore"</span> <span class="attr">pointcut</span>=<span class="string">"within(cn.tedu.service.UserServiceImpl)"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstAspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"记录日志"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDay02</title>
    <url>/2020/01/29/SpringDay02/</url>
    <content><![CDATA[<h2 id="单例和多例"><a href="#单例和多例" class="headerlink" title="单例和多例"></a>单例和多例</h2><pre><code>Spring容器管理的bean在默认情况下是单例，也就是一个bean创建一个对象，存在内置Map集合中，之后无论获取多少次该bean，都返回的同一个对象。</code></pre><h3 id="bean在单例模式的生命周期："><a href="#bean在单例模式的生命周期：" class="headerlink" title="bean在单例模式的生命周期："></a>bean在单例模式的生命周期：</h3><pre><code>bean在单例模式下，Spring容器启动时解析xml发现该bean标签后，直接创建该bean的对象存入内部map中保存，此后无论调用多少次getBean（）都是从map中获取该对象返回，一直是一个对象，次对象一直被Spring容器持有，知道容器退出时，随着容器的退出对象被销毁</code></pre><h3 id="案例-单例"><a href="#案例-单例" class="headerlink" title="案例-单例"></a>案例-单例</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置约束条件可以设置从bean中获取对象是单例还是多例</span></span><br><span class="line"><span class="comment">        scope="prototype"是多例</span></span><br><span class="line"><span class="comment">        scope="singleton"是单例</span></span><br><span class="line"><span class="comment">        Spring容器默认配置是单例</span></span><br><span class="line"><span class="comment">        所以不配置是单例</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Person"</span> <span class="attr">scope</span>=<span class="string">"singelton"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试单例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始化Spring容器</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//获取bean对象</span></span><br><span class="line">        Person person1 = (Person) context.getBean(<span class="string">"person"</span>);</span><br><span class="line">        Person person2 = (Person) context.getBean(<span class="string">"person"</span>);</span><br><span class="line">        System.out.println(person1);<span class="comment">//cn.tedu.domain.Person@2df3b89c</span></span><br><span class="line">        System.out.println(person2);<span class="comment">//cn.tedu.domain.Person@2df3b89c</span></span><br><span class="line">        <span class="comment">//关闭容器</span></span><br><span class="line">        ((ClassPathXmlApplicationContext) context).close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="bean在多例模式下的生命周期："><a href="#bean在多例模式下的生命周期：" class="headerlink" title="bean在多例模式下的生命周期："></a>bean在多例模式下的生命周期：</h3><pre><code>bean在多例模式下，Spring容器启动时解析xml时发现bean标签后，只是将该bean进行管理，并不会创建对象，此后每次使用getBean（）获取该bean时，Spring都会重新创建该对象返回，每次都是一个新的对象。这个对象Spring容器不会持有，什么时候销毁取绝于使用对象自己销毁。</code></pre><h2 id="案例-多例"><a href="#案例-多例" class="headerlink" title="案例-多例"></a>案例-多例</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置约束条件可以设置从bean中获取对象是单例还是多例</span></span><br><span class="line"><span class="comment">        scope="prototype"是多例</span></span><br><span class="line"><span class="comment">        scope="singleton"是单例</span></span><br><span class="line"><span class="comment">        Spring容器默认配置是单例</span></span><br><span class="line"><span class="comment">        所以不配置是单例</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Person"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="懒加载机制"><a href="#懒加载机制" class="headerlink" title="懒加载机制"></a>懒加载机制</h2><pre><code>Spring默认在容器初始化的过程中，解析xml，并且创建单例的bean保存到map中，这样的机制在bean较少时问题不大，但一旦bean非常多时，Spring需要在启动的过程中花费大量的时间来创建bean花费大量的空间来存储bean，但这些bean可能很就都用不上，这种在启动时在时间和空间上的浪费很不值得。所以spring提供了懒加载机制。所谓的懒加载机制就是可以规定指定的bean不在启动时立刻创建，而是后续在第一次使用到才创建，从而减轻在启动过程中对时间和内存的消耗</code></pre><ol>
<li><strong>懒加载机制只对单例bean有作用，对于多例bean设置懒加载没有意义</strong></li>
<li><strong>懒加载只是延后了对象的创建的时机，对象仍然是单例</strong></li>
</ol>
<h3 id="懒加载的配置方式"><a href="#懒加载的配置方式" class="headerlink" title="懒加载的配置方式"></a>懒加载的配置方式</h3><h4 id="为指定bean配置懒加载"><a href="#为指定bean配置懒加载" class="headerlink" title="为指定bean配置懒加载"></a>为指定bean配置懒加载</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">      </span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置指定bean的懒加载default-lazy-init="true"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Person"</span> <span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="为全局配置懒加载"><a href="#为全局配置懒加载" class="headerlink" title="为全局配置懒加载"></a>为全局配置懒加载</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">       <span class="attr">default-lazy-init</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"><span class="comment">&lt;!--设置默认全局配置的懒加载default-lazy-init="true"--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Person"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="配置初始化和销毁的方法"><a href="#配置初始化和销毁的方法" class="headerlink" title="配置初始化和销毁的方法"></a>配置初始化和销毁的方法</h3><pre><code>在Spring中如果某个bean在初始化之后or销毁之前要做一些额外操作可以为该bean配置厨师化和销毁的方法，在这些方法中完成功能</code></pre><h4 id="Spring约束文件"><a href="#Spring约束文件" class="headerlink" title="Spring约束文件"></a>Spring约束文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置初始化和摧毁的方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcUtils"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.JDBCUtils"</span> <span class="attr">init-method</span>=<span class="string">"myInit"</span> <span class="attr">destroy-method</span>=<span class="string">"myDestroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="Spring中关键方法的执行顺序："><a href="#Spring中关键方法的执行顺序：" class="headerlink" title="Spring中关键方法的执行顺序："></a>Spring中关键方法的执行顺序：</h4><p><strong>!!!! 在Spring创建bean对象时，先创建对象（通过无参构造or工厂），之后立即调用init方式来执行初始化操作，之后此bean就可以哪来调用其它普通方法，而在对象销毁之前，Spring容器调用其destroy方法来执行销毁操作</strong></p>
<h3 id="Spring-DI"><a href="#Spring-DI" class="headerlink" title="Spring DI"></a>Spring DI</h3><h4 id="IOC（DI）-控制反转（依赖注入）"><a href="#IOC（DI）-控制反转（依赖注入）" class="headerlink" title="IOC（DI）-控制反转（依赖注入）"></a>IOC（DI）-控制反转（依赖注入）</h4><pre><code>所谓的IOC称之为控制反转，简单来说就是将对象的创建的权利及对象的生命周期的管理过程交由Spring框架来处理，从此在开发过程中不再需要关注对象的创建和生命周期的管理，而是在需要时由Spring框架提供，这个由Spring框架管理对象创建和生命周期的机制称之为控制反转。
而在创建对象的过程中Spring可以配置对对象的属性进行设置，这个过程称之为依赖注入也即DI</code></pre><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><pre><code>通常的javabean属性都会私有化，而对外暴露setXxx（）getXxx方法，此时Spring可以通过这样的setXxx（）方法将属性的值注入对象</code></pre><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hero"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Hero"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"亚索"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"job"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>程序员<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>架构师<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>大数据工程师<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>40000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"亚索"</span> <span class="attr">value</span>=<span class="string">"德玛西亚"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"刀妹"</span> <span class="attr">value</span>=<span class="string">"艾欧尼亚"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>亚索<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>刀妹<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自定义bean的注入"><a href="#自定义bean的注入" class="headerlink" title="自定义bean的注入"></a>自定义bean的注入</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hero"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Hero"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"亚索"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"18"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"job"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>程序员<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>架构师<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>大数据工程师<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>10000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>40000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>30000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"亚索"</span> <span class="attr">value</span>=<span class="string">"德玛西亚"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"刀妹"</span> <span class="attr">value</span>=<span class="string">"艾欧尼亚"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>亚索<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>刀妹<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dog"</span> <span class="attr">ref</span>=<span class="string">"dog"</span> &gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cat"</span> <span class="attr">ref</span>=<span class="string">"cat"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"snake"</span> <span class="attr">ref</span>=<span class="string">"snake"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Dog"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jobs"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"11"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Cat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"snake"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Snake"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小白"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"1000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h3><h4 id="在Spring的set方式实现注入的过程中，支持自动装配机制，所谓的自动装配机制，会根据要设置的javabean属性的名字or类型到Spring中自动寻找对应的idor类型的进行设置，从而省去依次配置的过程，简化了配置"><a href="#在Spring的set方式实现注入的过程中，支持自动装配机制，所谓的自动装配机制，会根据要设置的javabean属性的名字or类型到Spring中自动寻找对应的idor类型的进行设置，从而省去依次配置的过程，简化了配置" class="headerlink" title="在Spring的set方式实现注入的过程中，支持自动装配机制，所谓的自动装配机制，会根据要设置的javabean属性的名字or类型到Spring中自动寻找对应的idor类型的进行设置，从而省去依次配置的过程，简化了配置"></a>在Spring的set方式实现注入的过程中，支持自动装配机制，所谓的自动装配机制，会根据要设置的javabean属性的名字or类型到Spring中自动寻找对应的idor类型的<bean>进行设置，从而省去依次配置的过程，简化了配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    autowire="byName" 根据javabean中需要注入属性的名字，在Spring容器中找到对应类型的id进行自动装配</span></span><br><span class="line"><span class="comment">    autowire="byType" 根据javabean中需要注入属性的类型，在Spring容器中找到对应的class类型进行配置</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hero"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Hero"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Dog"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"jobs"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"11"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Cat"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"tom"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"snake"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Snake"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小白"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"1000"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="基于构造方法的注入"><a href="#基于构造方法的注入" class="headerlink" title="基于构造方法的注入"></a>基于构造方法的注入</h3><h4 id="对象属性设置的另一种方式是在对象创建的过程中通过构造方法传入参数并且设置对象的属性。"><a href="#对象属性设置的另一种方式是在对象创建的过程中通过构造方法传入参数并且设置对象的属性。" class="headerlink" title="对象属性设置的另一种方式是在对象创建的过程中通过构造方法传入参数并且设置对象的属性。"></a>对象属性设置的另一种方式是在对象创建的过程中通过构造方法传入参数并且设置对象的属性。</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hero"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Hero"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"旺财"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">ref</span>=<span class="string">"dog"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.domain.Dog"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"小白"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">value</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>










]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDay03</title>
    <url>/2020/01/29/SpringDay03/</url>
    <content><![CDATA[<h2 id="Spring注解方式实现IOC和DI"><a href="#Spring注解方式实现IOC和DI" class="headerlink" title="Spring注解方式实现IOC和DI"></a>Spring注解方式实现IOC和DI</h2><h3 id="1-Spring注解"><a href="#1-Spring注解" class="headerlink" title="1.Spring注解"></a>1.Spring注解</h3><pre><code>Spring除了默认的使用xml配置&lt;bean&gt;标签的方式实现配置外，也可以通过注解的方式来实现配置，这种方式效率更高，配置信息清晰，代码在哪对应的配置也在哪儿。</code></pre><p><strong>所谓注解就是程序看的提示信息，很多时候都用来作为轻量级配置方式</strong></p>
<h3 id="Spring注解方式实现IOC"><a href="#Spring注解方式实现IOC" class="headerlink" title="Spring注解方式实现IOC"></a>Spring注解方式实现IOC</h3><p>a. 导入开发jar包<br>b. 编写配置文件，并导入context约束</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>c. 开启包扫描</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>d. 使用注解注册bean<br>    在配置的包中的额类上使用@Component注解，这个类会自动被注册为bean，使用当前类的class为<bean>的class，默认情况下判断类名的第二字母，如果是大写，首字母不变作为id，如果第二个字母是小写，首字母就是小写，默认作为id，也可以自己指定id</p>
<hr>
<p>e. 可以使bean类实现BeanNameAware接口，并实现其中setBeanName<br>   方法， spring容器会在初始化bean时，调用此方法告知当前bean的id。通过这个方式可以获取 bean的id信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"person"</span>)<span class="comment">//指定标签id不指定类名的首字母小写</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">BeanNameAware</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"==="</span>+<span class="keyword">this</span>.getClass().getName()+<span class="string">"==="</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>f. 注解方式实现工厂注册bean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//可以自己指定id，也可以默认getInstance</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog(<span class="string">"小黑"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Spring注解方式实现DI"><a href="#Spring注解方式实现DI" class="headerlink" title="Spring注解方式实现DI"></a>Spring注解方式实现DI</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:util</span>=<span class="string">"http://www.springframework.org/schema/util"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/util</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/util/spring-util-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu.domain"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解方式的DI--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"my.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:set</span> <span class="attr">id</span>=<span class="string">"set"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>111<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>222<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>333<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:map</span> <span class="attr">id</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"k1"</span> <span class="attr">value</span>=<span class="string">"v1"</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">util:properties</span> <span class="attr">id</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>小<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">util:properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="在类的属性中通过-Value注入赋值"><a href="#在类的属性中通过-Value注入赋值" class="headerlink" title="在类的属性中通过@Value注入赋值"></a>在类的属性中通过@Value注入赋值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Value("亚索")</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//@Value("13")</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;age&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;@list&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;@set&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;@map&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; map;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;@properties&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Properties props;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hero&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", list="</span> + list +</span><br><span class="line">                <span class="string">", set="</span> + set +</span><br><span class="line">                <span class="string">", map="</span> + map +</span><br><span class="line">                <span class="string">", props="</span> + props +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="f-使用注解注入自定义bean类型数据"><a href="#f-使用注解注入自定义bean类型数据" class="headerlink" title="f.使用注解注入自定义bean类型数据"></a>f.使用注解注入自定义bean类型数据</h3><h4 id="在bean中的属性上通过-Autowired实现自定义bean类型的属性注入代码"><a href="#在bean中的属性上通过-Autowired实现自定义bean类型的属性注入代码" class="headerlink" title="在bean中的属性上通过@Autowired实现自定义bean类型的属性注入代码"></a>在bean中的属性上通过@Autowired实现自定义bean类型的属性注入代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"亚索"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"10"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"JMDog"</span>)<span class="comment">//一旦配置了@Qualifier("JMDog")会按照指定id注入，找到注入，找不到就抛出异常</span></span><br><span class="line">    <span class="comment">//@Resource(name = "JMDog") Java提供的不是Spring提供的，基本不用</span></span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hero&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", dog="</span> + dog +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<font color=red>
    当Spring容器解析到@Component注解时，创建当前类的bean在Spring容器中进行管理，在创建bean的过程中发现了@Autowired注解，会根据当前bean的类型，寻找Spring中是否存在该类型的bean，如果唯一的bean，直接注入，如果有多个根据id判断，如果有注入，如果没有抛出异常
    其次，可以额外配置@Qualifier（“”）注解强制要求按照id进行寻找，找到就注入，找不到就抛出异常，注意@Autowired&@Qualifier（“”）需要配合使用
</font>

<h2 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h2><ol>
<li>@Scope(value=”prototype”)<br> 配置修饰类是单例还是多例，Spring默认是单例<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置bean为多例</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>@Lazy<br> 配置修饰的类的bean采用懒加载机制<br> Spring默认在初始化时就通过反射创建对象，并且以键值对的形式存入Spring容器中的Map集合中，在类上配置懒加载的注释，可以在对象使用时再创建，避免内存的浪费<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Lazy</span><span class="comment">//懒加载</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"person2...init"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>@PostConstruct<br> 在bean对应的类中 修饰某个方法 将该方法声明为初始化方法，对象创建之后立即执 行。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"初始化数据库连接"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>@PreDestroy<br> 在bean对应的类中 修饰某个方法 将该方法声明为销毁的方法，对象销毁之前调用的方 法。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"销毁数据库连接"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>@Controller @Service @Repository @Component<br> 这四个注解的功能是完全相同的，都是用来修饰类，将雷声名为Spring管理的bean的<br> @Component 一般认为是通用的注解<br> @Controller 用在软件分层的控制层，一般用在web层上<br> @Service用在业务访问层，service层<br> @Repository用在数据访问层（Dao层）</li>
</ol>
<h3 id="利用Spring-IOC-DI-实现软件分层解耦"><a href="#利用Spring-IOC-DI-实现软件分层解耦" class="headerlink" title="利用Spring IOC DI 实现软件分层解耦"></a>利用Spring IOC DI 实现软件分层解耦</h3><ol>
<li>软件分层思想回顾<br> 在软件领域有MVC软件设计思想，指导着软件开发过程。在javaee开发领域，javaee 的经典三层架构MVC设计思想的经典应用。而在软件设计思想中，追求的是”高内聚 低 耦合”的目标，利用Spring的IOC 和 DI 可以非常方便的实现这个需求。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建不同类的数据的类型实现userDao接口</span></span><br><span class="line"><span class="meta">@Repository</span>(<span class="string">"userDao"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleUserDao</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>+<span class="string">"正在向数据库添加用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlUserDao</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>+<span class="string">"正在添加用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//service层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDao userDao = <span class="keyword">null</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.addUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//web层</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService service = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.regist();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>




































]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDay06</title>
    <url>/2020/01/29/SpringDay06/</url>
    <content><![CDATA[<h2 id="1-通过aop进行权限的控制"><a href="#1-通过aop进行权限的控制" class="headerlink" title="1.通过aop进行权限的控制"></a>1.通过aop进行权限的控制</h2><ol>
<li>通过自定义注解声明业务方法是否需要权限控制</li>
<li>通过权限注解上的属性声明需要什么样的权限</li>
<li>通过切面拦截业务的方法，根据是否需要权限，是否具有权限，控制目标方法的执行<h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切面代码</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivAspect</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* cn.tedu.servive..*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取目标对象</span></span><br><span class="line">        Object target = pjp.getTarget();</span><br><span class="line">        <span class="comment">//2.获取目标方法</span></span><br><span class="line">        MethodSignature signature = (MethodSignature) pjp.getSignature();</span><br><span class="line">        Method method = signature.getMethod();<span class="comment">//接口上的方法</span></span><br><span class="line">        <span class="comment">//3.获取实现类上的目标方法</span></span><br><span class="line">        Method methodInstance = target.getClass().getMethod(method.getName(), method.getParameterTypes());</span><br><span class="line">        <span class="comment">//4.判断是否有注解</span></span><br><span class="line">        <span class="keyword">if</span> (methodInstance.isAnnotationPresent(PrivAnno<span class="class">.<span class="keyword">class</span>))</span>&#123;</span><br><span class="line">            PrivAnno annotation = methodInstance.getAnnotation(PrivAnno<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            PrivEnum[] privEnums = annotation.value();</span><br><span class="line">            <span class="keyword">if</span> (Arrays.asList(privEnums).contains(Test01.priv)) &#123;</span><br><span class="line">                 <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"权限不够"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//枚举类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> PrivEnum &#123;</span><br><span class="line">    ADMIN,SUPERADMIN,VISITOR</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开发注释，来进行权限控制</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PrivAnno &#123;</span><br><span class="line">    PrivEnum [] value() ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现事务的控制"><a href="#实现事务的控制" class="headerlink" title="实现事务的控制"></a>实现事务的控制</h2> 通过AOP实现事务的控制</li>
<li>开发事务注解，通过业务方法上是否有注解来表示方法是否需要事务</li>
<li>在切面中判断目标方法是否具有事务注解决定是否执行事务</li>
<li>通过事务管理器管理事务防止耦合<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//jdbc连接工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">JDBCUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:mysql:///mydb2"</span>,<span class="string">"root"</span>,<span class="string">"root1234"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement stat, ResultSet rs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rs.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                rs = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stat.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                stat = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                conn.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                conn = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransactionManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection conn = JDBCUtils.getConn();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TransactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startTran</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConn</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commitTran</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回滚事务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollbackTran</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放资源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//切面类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* cn.tedu.service..*(..)) &amp;&amp; @annotation(ax)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">myAround</span><span class="params">(ProceedingJoinPoint pjp, Trans ax)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TransactionManager.startTran();</span><br><span class="line">            Object retObj = pjp.proceed();</span><br><span class="line">            TransactionManager.commitTran();</span><br><span class="line">            <span class="keyword">return</span> retObj;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            TransactionManager.rollbackTran();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            TransactionManager.release();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="spring整合JDBC-声名式事务处理"><a href="#spring整合JDBC-声名式事务处理" class="headerlink" title="spring整合JDBC-声名式事务处理"></a>spring整合JDBC-声名式事务处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mydb2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置jdbc模版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mydb2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring中的事务管理（配置文件）"><a href="#Spring中的事务管理（配置文件）" class="headerlink" title="Spring中的事务管理（配置文件）"></a>Spring中的事务管理（配置文件）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置事务切面--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc01"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.tedu.service..* (..))"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc01"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span> &gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--rollback-for="java.lang.Throwable 对异常强制回滚，进行事务管理--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"addUser"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">rollback-for</span>=<span class="string">"java.lang.Throwable"</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delUser"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring中的事务管理（注解方式）"><a href="#Spring中的事务管理（注解方式）" class="headerlink" title="Spring中的事务管理（注解方式）"></a>Spring中的事务管理（注解方式）</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置数据源--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql:///mydb2"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root1234"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置jdbc模版类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--开启注解方式事务管理--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="指定开启事务的方法"><a href="#指定开启事务的方法" class="headerlink" title="指定开启事务的方法"></a>指定开启事务的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(rollbackFor = IOException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">Override</span></span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">void</span> <span class="title">addUser</span>(<span class="title">User</span> <span class="title">user</span>) <span class="title">throws</span> <span class="title">IOException</span> </span>&#123;</span><br><span class="line">        userDao.addUser(user);</span><br><span class="line">        <span class="comment">//int i = 1/0;</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"io 异常"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>






</li>
</ol>
]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringDay05</title>
    <url>/2020/01/29/SpringDay05/</url>
    <content><![CDATA[<h2 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h2><h3 id="within表达式"><a href="#within表达式" class="headerlink" title="within表达式"></a>within表达式</h3><pre><code>通过类名进行匹配，是一种粗粒度的切入点表达式，不可以指定某个方法进行增强，以类作为基本的单位</code></pre><h3 id="在Spring的约束文件中配置切入点和切面（within切入点表达式）"><a href="#在Spring的约束文件中配置切入点和切面（within切入点表达式）" class="headerlink" title="在Spring的约束文件中配置切入点和切面（within切入点表达式）"></a>在Spring的约束文件中配置切入点和切面（within切入点表达式）</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--添加Spring AOP相关的约束</span></span><br><span class="line"><span class="comment">    xmlns:aop="http://www.springframework.org/schema/aop"</span></span><br><span class="line"><span class="comment">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注释配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>&gt;</span><span class="tag">&lt;/<span class="name">context:annotation-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置AOP--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置切面类--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"firstAspect"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--指定切入点规则,通知方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut</span>=<span class="string">"within(cn.tedu.service.UserServiceImpl)"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="execution表达式"><a href="#execution表达式" class="headerlink" title="execution表达式"></a>execution表达式</h3><pre><code>通过方法进行匹配，是一种细粒度的切入点表达式，以方法作为基本的单元</code></pre><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pc01"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.tedu.service..*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"firstAspect"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"before"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pc01"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="Spring的五大通知类型"><a href="#Spring的五大通知类型" class="headerlink" title="Spring的五大通知类型"></a>Spring的五大通知类型</h2><h3 id="前置通知"><a href="#前置通知" class="headerlink" title="前置通知"></a>前置通知</h3><ol>
<li>在目标方法执行之前执行的通知<h3 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h3></li>
<li>在目标方法执行之前，执行之后都会执行的通知<h3 id="后置通知"><a href="#后置通知" class="headerlink" title="后置通知"></a>后置通知</h3></li>
<li>在目标方法执行之后的通知<h3 id="异常通知"><a href="#异常通知" class="headerlink" title="异常通知"></a>异常通知</h3></li>
<li>在目标方法抛出异常后执行的通知<h3 id="最终通知"><a href="#最终通知" class="headerlink" title="最终通知"></a>最终通知</h3></li>
<li>无论如何都会在目标方法调用后执行</li>
</ol>
<h4 id="多个通知执行顺序"><a href="#多个通知执行顺序" class="headerlink" title="多个通知执行顺序"></a>多个通知执行顺序</h4><h5 id="未出现异常"><a href="#未出现异常" class="headerlink" title="未出现异常"></a>未出现异常</h5><pre><code>前置通知
环绕通知前
目标方法（添加用户cn.tedu.domain.User@710f4dc7）
最终通知
环绕通知后
后置通知</code></pre><h5 id="出现异常（）"><a href="#出现异常（）" class="headerlink" title="出现异常（）"></a>出现异常（）</h5><pre><code>前置通知
环绕通知前
目标方法（添加用户cn.tedu.domain.User@710f4dc7）
最终通知
异常通知</code></pre><h4 id="出现多个切面类时，采用了责任链设计模式，切面的配置顺序决定了通知的执行顺序。以两个切面为例：具体执行过程如下："><a href="#出现多个切面类时，采用了责任链设计模式，切面的配置顺序决定了通知的执行顺序。以两个切面为例：具体执行过程如下：" class="headerlink" title="出现多个切面类时，采用了责任链设计模式，切面的配置顺序决定了通知的执行顺序。以两个切面为例：具体执行过程如下："></a>出现多个切面类时，采用了责任链设计模式，切面的配置顺序决定了通知的执行顺序。以两个切面为例：具体执行过程如下：</h4><pre><code>web层调用service层目标方法时，会经过第一个切面，执行前置通知和环绕前通知，环绕通知调用proceed（）时进入下一个切面，执行第二个切面的前置通知，和环绕前通知，进入第二个切面的proceed的方法，放行调用目标方法，下面进入第二个切面的环绕后通知，和后置通知，最终通知，在进入第一个切面层，环绕后通知，和后置通知，最终通知，响应给web层</code></pre><h6 id="代码执行结果"><a href="#代码执行结果" class="headerlink" title="代码执行结果"></a>代码执行结果</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前置通知</span><br><span class="line">环绕通知前</span><br><span class="line">second前置通知</span><br><span class="line">second环绕通知前</span><br><span class="line">添加用户cn.tedu.domain.User@2de23121</span><br><span class="line">second最终通知</span><br><span class="line">second环绕通知后</span><br><span class="line">second后置通知</span><br><span class="line">最终通知</span><br><span class="line">环绕通知后</span><br><span class="line">后置通知</span><br></pre></td></tr></table></figure>











]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVCDay01</title>
    <url>/2020/01/29/SpringMVCDay01/</url>
    <content><![CDATA[<h2 id="1-SpringMVC概述"><a href="#1-SpringMVC概述" class="headerlink" title="1.SpringMVC概述"></a>1.SpringMVC概述</h2><h3 id="SpringMVC是一个WEB层，控制层框架，主要用来负责与客户端交互，业务逻辑的调用。SpringMVC是Spring家族的一大组件，Spring整合SpringMVC可以做到无缝集成，特点：简单易用性能佳"><a href="#SpringMVC是一个WEB层，控制层框架，主要用来负责与客户端交互，业务逻辑的调用。SpringMVC是Spring家族的一大组件，Spring整合SpringMVC可以做到无缝集成，特点：简单易用性能佳" class="headerlink" title="SpringMVC是一个WEB层，控制层框架，主要用来负责与客户端交互，业务逻辑的调用。SpringMVC是Spring家族的一大组件，Spring整合SpringMVC可以做到无缝集成，特点：简单易用性能佳"></a>SpringMVC是一个WEB层，控制层框架，主要用来负责与客户端交互，业务逻辑的调用。SpringMVC是Spring家族的一大组件，Spring整合SpringMVC可以做到无缝集成，特点：简单易用性能佳</h3><h2 id="2-SpringMVC相对与Servlet的优势"><a href="#2-SpringMVC相对与Servlet的优势" class="headerlink" title="2.SpringMVC相对与Servlet的优势"></a>2.SpringMVC相对与Servlet的优势</h2><p>a. Servlet的开发配置相对麻烦，servlet特别多的时候web.xml文件将会非常的臃肿<br>b. 每个Servlet都只能处理一个功能，如果需要多个功能就需要开发多个servlet，项目中存在大量的servlet显得臃肿。<br>c. 获取请求参数进行类型转换封装数据到bean的过程比较繁琐。<br>d. 其他开发中不方便的地方，例如乱码问题，数据格式处理，表单检索</p>
<h2 id="spring-MVC详解"><a href="#spring-MVC详解" class="headerlink" title="spring MVC详解"></a>spring MVC详解</h2><ol>
<li>SpringMVC的组件<br>a. 前端控制器（DispatcherServlet）<br> 本质上是一个servlet，相当于一个中转站，所有的访问都会走到这个servlet中，再根据配置进行中转到相对应的handler中进行处理，获取数据和视图<br>b. 处理器映射器（HandlerMapping）<br> 本质上就是一段映射关系，将将访问路径和对应的Handler存储为映射关系，在需要时供前端控制器查阅。<br>c. 处理器适配器（HandlerAdapter）<br> 本质上就是一个适配器，可以根据要求找到对应的handler来运行。前端控制器找到处理器映射器找到对应的handler信息之后，将请求响应和对应的handler信息交由处理器适配器来处理，处理器适配器找到真正的handler执行后，将结果也就是model and view返回给前端控制器。<br>d. 视图解析器（ViewResolver）<br> 本质上是一种映射关系，可以将视图名称映射到真正的视图地址。前端控制器调用处理器适配完成后的到model和view，将view信息传给视图解析器得到真正的view。<br>e. 视图（view）<br> 本质上就是将handler处理器中返回的model数据嵌入到视图解析后得到的jsp页面中，向客户端作出响应</li>
</ol>
<h2 id="图解："><a href="#图解：" class="headerlink" title="图解："></a>图解：</h2><p><image src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=859978010,3262158413&fm=26&gp=0.jpg" width=50%>&lt;&gt;</p>
<h3 id="配置前端控制器"><a href="#配置前端控制器" class="headerlink" title="配置前端控制器"></a>配置前端控制器</h3><h4 id="1-前端控制器本身就是一个servlet-，首先要在WEB-INF下的web-xml中配置该web项目的servlet"><a href="#1-前端控制器本身就是一个servlet-，首先要在WEB-INF下的web-xml中配置该web项目的servlet" class="headerlink" title="1.前端控制器本身就是一个servlet ，首先要在WEB-INF下的web.xml中配置该web项目的servlet"></a>1.前端控制器本身就是一个servlet ，首先要在WEB-INF下的web.xml中配置该web项目的servlet</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动配置核心文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:/springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置servlet的映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="生成SpringMVC核心配置文件"><a href="#生成SpringMVC核心配置文件" class="headerlink" title="生成SpringMVC核心配置文件"></a>生成SpringMVC核心配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置处理器映射器中的路径和处理器的映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hello.action"</span> <span class="attr">class</span>=<span class="string">"cn.tedu.web.Hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器中视图名称和真正页面的映射关系，拼接上前缀后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建类实现controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//创建modelAndView</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        <span class="comment">//封装数据</span></span><br><span class="line">        modelAndView.addObject(<span class="string">"msg1"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">        modelAndView.addObject(<span class="string">"msg2"</span>,<span class="string">"hello springMVC"</span>);</span><br><span class="line">        <span class="comment">//封装视图</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"hello"</span>);</span><br><span class="line">        <span class="comment">//返回modelAndView</span></span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="SpringMVC注解方式配置"><a href="#SpringMVC注解方式配置" class="headerlink" title="SpringMVC注解方式配置"></a>SpringMVC注解方式配置</h2><h3 id="SpringMVC支持使用注解方式配置，比配置文件更加的灵活易用，是目前的主流配置方式"><a href="#SpringMVC支持使用注解方式配置，比配置文件更加的灵活易用，是目前的主流配置方式" class="headerlink" title="SpringMVC支持使用注解方式配置，比配置文件更加的灵活易用，是目前的主流配置方式"></a>SpringMVC支持使用注解方式配置，比配置文件更加的灵活易用，是目前的主流配置方式</h3><h3 id="springMVC注解工作原理"><a href="#springMVC注解工作原理" class="headerlink" title="springMVC注解工作原理"></a>springMVC注解工作原理</h3><ol>
<li>当服务器启动时，会先加载web.xml文件，之后通过引入核心配置文件来加载SpringMVC.xml</li>
<li>当解析到包扫描时，扫描指定的包，并将含有@Conteoller注解的类解析为处理器</li>
<li>如果配置过<a href="mvc:annotation-driven">mvc:annotation-driven</a>就会解析Spring-MVC注解</li>
<li>解析@requestMapping（value=“/test01.action”），将指定的地址和当前方法的映射关系保存</li>
<li>当客户端发出请求访问时，SpringMVC寻找改地址的映射关系，找到就执行方法，找不到抛出404</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置包扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.tedu"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--配置mvc注解方式的DI--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置视图解析器中视图名称和真正页面的映射关系--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置前端控制器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--手动配置核心文件的位置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="test01-jsp"><a href="#test01-jsp" class="headerlink" title="test01.jsp"></a>test01.jsp</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;this is test01.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;$&#123;msg&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="comment">//在类上加上注解指的是在访问的地址上加上前缀</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/my01"</span>)</span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller01</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test01.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test01</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"one word one dream"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test01"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过value属性指定当前的映射到那些路径,可以映射到多个路径</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(&#123;<span class="string">"/test04.action"</span>,<span class="string">"/test02.action"</span>,<span class="string">"/test03.action"</span>&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test02</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"just do it"</span>);</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"one word one dream"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test02"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SpringMVC获取请求参数"><a href="#SpringMVC获取请求参数" class="headerlink" title="SpringMVC获取请求参数"></a>SpringMVC获取请求参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求参数：日期数据处理</span></span><br><span class="line"><span class="comment">     *  通过注册自定义类型编辑器使SpringMVC支持自定义格式请求参数的处理</span></span><br><span class="line"><span class="comment">     *  此处，SpringMVC为Date类型已经提供了编辑器类，所以直接使用，不用自己写</span></span><br><span class="line"><span class="comment">     * http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01test09.jsp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myInitBinder</span><span class="params">(ServletRequestDataBinder dataBinder)</span></span>&#123;</span><br><span class="line">        dataBinder.registerCustomEditor(Date.class,new CustomDateEditor(new SimpleDateFormat("yyyy-MM-dd"),true));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test09.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test09</span><span class="params">(String name, <span class="keyword">int</span> age, Date birthday)</span> </span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        String format1 = format.format(birthday);</span><br><span class="line">        System.out.println(format1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取请求参数：中文乱码解决</span></span><br><span class="line"><span class="comment">     *     如果服务器配置的编码是utf-8,且项目采用的也是utf-8则默认请求参数无乱码</span></span><br><span class="line"><span class="comment">     *     tomcat8默认编码为utf-8(可以更改)</span></span><br><span class="line"><span class="comment">     *     tomcat7及更老的版本默认编码为iso8859-1(可以更改)</span></span><br><span class="line"><span class="comment">     *     如果遇到服务器编码和项目编码不一致时会产生乱码</span></span><br><span class="line"><span class="comment">     *     对于POST提交 可以通过request.setCharacterEncoding("utf-8")解决乱码</span></span><br><span class="line"><span class="comment">     *     但此行代码对GET无效，GET提交的请求参数乱码，只能手工编解码来解决</span></span><br><span class="line"><span class="comment">     *     手工编解码解决乱码的方式对POST提交也有效</span></span><br><span class="line"><span class="comment">     *     springmvc提供了过滤器CharacterEncodingFilter来帮助我们解决乱码</span></span><br><span class="line"><span class="comment">     *     但此过滤器本质上就是request.setCharacterEncoing()所以也是只对POST有效</span></span><br><span class="line"><span class="comment">     *     ,即使配置了GET提交乱码也要手动解决</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test08.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test08</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        <span class="comment">//POST提交</span></span><br><span class="line">        <span class="comment">//request.setCharacterEncoding("utf-8");</span></span><br><span class="line">        <span class="comment">//String uname = request.getParameter("uname");</span></span><br><span class="line">        <span class="comment">//System.out.println(uname);</span></span><br><span class="line">        <span class="comment">//GET提交</span></span><br><span class="line">        <span class="comment">//String uname = request.getParameter("uname");</span></span><br><span class="line">        <span class="comment">//byte [] data = uname.getBytes("iso8859-1");</span></span><br><span class="line">        <span class="comment">//uname = new String(data,"utf-8");</span></span><br><span class="line">        <span class="comment">//System.out.println(uname);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    获取请求参数：多个同名请求参数的处理</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test07.action?name=tt&amp;love=bb&amp;love=pp&amp;love=zz</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test07.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test07</span><span class="params">(String name,String [] love)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//封装到数组里</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(Arrays.asList(love));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数：自动封装请求参数到bean 对复杂类型的处理</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test06.action?id=35&amp;name=jj&amp;age=18&amp;addr=cd&amp;dog.name=wd&amp;dog.age=1&amp;dog.cat.name=xx&amp;dog.cat.age=3</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test06.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test06</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数：自动封装请求参数到bean 对复杂类型的处理</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test05.action?id=35&amp;name=jj&amp;age=18&amp;addr=cd&amp;dog.name=wd&amp;dog.age=1</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test05.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数：自动封装请求参数到bean</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test04.action?id=35&amp;name=jj&amp;age=18&amp;addr=cd</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test04.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数: 通过@RequestParam指定参数赋值,解决请求参数名和方法参数不一致时赋值问题</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test03.action?name=yasuo&amp;uage=19</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test03.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String username, @<span class="title">RequestParam</span><span class="params">(<span class="string">"uage"</span>)</span> <span class="keyword">int</span> age) </span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">"~~~~"</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数: 直接获取</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test02.action?username=yasuo&amp;age=19</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test02.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">(String username, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">"~~~~"</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求参数：传统方式获取</span></span><br><span class="line">    <span class="comment">// http://localhost:8080/SpringMVCDay01_04_Params_war_exploded/my01/test01.action?username=yasuo&amp;age=19</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test01.action"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        <span class="keyword">int</span> age = Integer.parseInt(request.getParameter(<span class="string">"age"</span>));</span><br><span class="line">        System.out.println(username + <span class="string">"~~~~"</span> + age);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>框架</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-cluster</title>
    <url>/2020/01/29/redis-cluster/</url>
    <content><![CDATA[<h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><ol>
<li>两两互联，任意节点和其他节点通信，底层使用二进制协议优化传输速度</li>
<li></li>
<li></li>
<li>引入新的数据分片计算方法（hash槽）引入hash取模（散列算法CRC16后对16384取余<h2 id="槽道"><a href="#槽道" class="headerlink" title="槽道"></a>槽道</h2></li>
</ol>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2020/01/28/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<hr>
<h2 id="单例设计模式（饿汉式静态变量）"><a href="#单例设计模式（饿汉式静态变量）" class="headerlink" title="单例设计模式（饿汉式静态变量）"></a>单例设计模式（饿汉式静态变量）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTest1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance==instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//饿汉式（静态变量）</span></span><br><span class="line"><span class="comment">//优点：这种写法比较简单，在类装载的时候就完成了实例化，避免了线程同步的问题</span></span><br><span class="line"><span class="comment">//缺点：没有实现lazy loading的效果，实例创建可能不会被使用，导致内存的浪费</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造方法，目的：不让外界随便创建实例</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//本类部自己创建实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="comment">//对外界提供公共的静态方法，返回实例的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="饿汉式（静态代码块）"><a href="#饿汉式（静态代码块）" class="headerlink" title="饿汉式（静态代码块）"></a>饿汉式（静态代码块）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTest2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton2 instance = Singleton2.getInstance();</span><br><span class="line">        Singleton2 instance1 = Singleton2.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//饿汉式（静态代码块）</span></span><br><span class="line"><span class="comment">//优点：这种写法比较简单，在类装载的时候就完成了实例化，避免了线程同步的问题</span></span><br><span class="line"><span class="comment">//缺点：没有实现lazy loading的效果，实例创建可能不会被使用，导致内存的浪费</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line">    <span class="comment">//私有化构造方法，目的：不让外界随便创建实例</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在本类中声明实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//在静态代码块中实例化对象</span></span><br><span class="line">        instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外界提供公共的静态方法，返回实例的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="单例设计模式（懒汉式线程不安全）"><a href="#单例设计模式（懒汉式线程不安全）" class="headerlink" title="单例设计模式（懒汉式线程不安全）"></a>单例设计模式（懒汉式线程不安全）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式（多线程不安全）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需要时再创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式（线程安全）</span></span><br><span class="line"><span class="comment">//优点：解决了线程安全的问题</span></span><br><span class="line"><span class="comment">//缺点：效率太低,不推荐使用</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//需要时再创建对象,提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="双重检查"><a href="#双重检查" class="headerlink" title="双重检查"></a>双重检查</h2><h3 id="解决了多线程安全问题"><a href="#解决了多线程安全问题" class="headerlink" title="解决了多线程安全问题"></a>解决了多线程安全问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 双重检查 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">//volatile防止指令重排推荐使用</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要时再创建对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//第一次检查</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//第二次检查</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><h3 id="利用jvm的装载机制，当类加载时静态内部类不会立即被加载，保证了线程安全以及效率的问题"><a href="#利用jvm的装载机制，当类加载时静态内部类不会立即被加载，保证了线程安全以及效率的问题" class="headerlink" title="利用jvm的装载机制，当类加载时静态内部类不会立即被加载，保证了线程安全以及效率的问题"></a>利用jvm的装载机制，当类加载时静态内部类不会立即被加载，保证了线程安全以及效率的问题</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleDemo2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过调用静态方法来创建实例</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance1 = Singleton.getInstance();</span><br><span class="line">        <span class="comment">//证明不管多少次调用Singleton类同一个实例</span></span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有化构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleInstance</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要时再创建对象,提供一个静态的公有方法，加入同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingleInstance.instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="使用枚举，可以实现单例，推荐使用，还能防止反序列化创建对象"><a href="#使用枚举，可以实现单例，推荐使用，还能防止反序列化创建对象" class="headerlink" title="使用枚举，可以实现单例，推荐使用，还能防止反序列化创建对象"></a>使用枚举，可以实现单例，推荐使用，还能防止反序列化创建对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest8</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.INSTANCE;</span><br><span class="line">        Singleton instance1 = Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance == instance1);<span class="comment">//true</span></span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance1.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">    INSTANCE;<span class="comment">//属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOk</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>My-first-blog</title>
    <url>/2020/01/28/My-first-blog/</url>
    <content><![CDATA[<h1 id="Mac下-hexo博客的搭建"><a href="#Mac下-hexo博客的搭建" class="headerlink" title="Mac下 hexo博客的搭建"></a>Mac下 hexo博客的搭建</h1><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><h3 id="这里可以去Nodejs的官网去下载安装"><a href="#这里可以去Nodejs的官网去下载安装" class="headerlink" title="这里可以去Nodejs的官网去下载安装"></a>这里可以去Nodejs的官网去下载安装</h3><ul>
<li>[hyperlink]（<a href="https://nodejs.org/en/）" target="_blank" rel="noopener">https://nodejs.org/en/）</a></li>
<li>点击downloads 选择合适的版本下载</li>
</ul>
<hr>
<h2 id="打开电脑的终端"><a href="#打开电脑的终端" class="headerlink" title="打开电脑的终端"></a>打开电脑的终端</h2><h3 id="切换到我们的sudo用户，这里是以管理员身份打开"><a href="#切换到我们的sudo用户，这里是以管理员身份打开" class="headerlink" title="切换到我们的sudo用户，这里是以管理员身份打开"></a>切换到我们的sudo用户，这里是以管理员身份打开</h3><ul>
<li><p>执行代码：<code>sudo su</code></p>
</li>
<li><p>显示Password：“输入密码”</p>
</li>
</ul>
<h2 id="查看node的版本，npm的版本"><a href="#查看node的版本，npm的版本" class="headerlink" title="查看node的版本，npm的版本"></a>查看node的版本，npm的版本</h2><ul>
<li><p>执行代码: <code>node -v</code></p>
</li>
<li><p>执行代码: <code>npm -v</code></p>
</li>
</ul>
<h2 id="安装hexo的框架"><a href="#安装hexo的框架" class="headerlink" title="安装hexo的框架"></a>安装hexo的框架</h2><h3 id="这里使用npm包安装管理器来安装一个淘宝的cnpm的镜像源包安装管理器来安装"><a href="#这里使用npm包安装管理器来安装一个淘宝的cnpm的镜像源包安装管理器来安装" class="headerlink" title="这里使用npm包安装管理器来安装一个淘宝的cnpm的镜像源包安装管理器来安装"></a>这里使用npm包安装管理器来安装一个淘宝的cnpm的镜像源包安装管理器来安装</h3><ul>
<li>执行代码：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></li>
</ul>
<p>安装完成后可以用代码<code>cnpm</code> 查看版本</p>
<h2 id="用cnpm全局安装hexo博客"><a href="#用cnpm全局安装hexo博客" class="headerlink" title="用cnpm全局安装hexo博客"></a>用cnpm全局安装hexo博客</h2><ul>
<li><p>执行代码：<code>cnpm install -g hexo-cli</code></p>
</li>
<li><p>安装完成后用<code>hexo -v</code>查看版本，确认安装完成。</p>
</li>
<li><p>查看当前路径:<code>pwd</code></p>
</li>
<li><p>新建一个blog的文件夹 ：<code>mkdir blog</code></p>
</li>
<li><p>注意！！！下面的所有操作都是在blog文件下操作，如果后面发生错误实在找不到删除blog文件夹重新操作即可。</p>
</li>
<li><p>进入blog文件夹，执行命令：<code>cd blog</code></p>
</li>
</ul>
<h2 id="hexo初始化"><a href="#hexo初始化" class="headerlink" title="hexo初始化"></a>hexo初始化</h2><ul>
<li>执行命令<code>sudo hexo init</code></li>
</ul>
<h2 id="最后启动hexo-blog"><a href="#最后启动hexo-blog" class="headerlink" title="最后启动hexo blog"></a>最后启动hexo blog</h2><ul>
<li>执行命令：<code>hexo s</code></li>
<li>默认在<a href="http://localhost:4000/可以打开" target="_blank" rel="noopener">http://localhost:4000/可以打开</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/01/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>文章</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>导航</tag>
      </tags>
  </entry>
</search>
